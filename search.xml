<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>肆意生长|02期-向外奔走的意义是什么</title>
      <link href="/2022/07/25/%E8%82%86%E6%84%8F%E7%94%9F%E9%95%BF-02%E6%9C%9F-%E5%90%91%E5%A4%96%E5%A5%94%E8%B5%B0%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2022/07/25/%E8%82%86%E6%84%8F%E7%94%9F%E9%95%BF-02%E6%9C%9F-%E5%90%91%E5%A4%96%E5%A5%94%E8%B5%B0%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2022年7月18日-7月24日</p></blockquote><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/2022.7.11-巧摄于江滩.JPG" alt="7.11于江滩" style="zoom:50%;" /><h1><span class="github-emoji" alias="thinking" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8">🤔</span>我们为何向外奔走</h1><p>在没有遇到刘同学之前，我在学校的生活应该是图书馆、宿舍、食堂、教学楼、操场这几个地方，周末也都是待在图书馆，只有朋友约我一起出去的时候才会出校，虽然我喜欢摄影旅行，但我对武汉好像没有探索的欲望，又或者我认为时间还长，不急着现在去走完，但是遇到刘同学之后，接触到他的观念，我的想法也发生了改变，前段时间几乎每周都会出去拍照，只不过因为放假，没有伙伴的我又开始了图书馆生活。</p><p>但是，我一直在思考，这两种生活方式对我而言何者更好，又或者我们选择向外奔走的意义是什么？</p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/QQ图片20220726180349.jpg" style="zoom: 50%;" /><h1><span class="github-emoji" alias="scroll" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dc.png?v8">📜</span>书影音</h1><h2 id="span-class-github-emoji-alias-book-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f4d6-png-v8-📖-span-《神雕侠侣》金庸"><span class="github-emoji" alias="book" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8">📖</span>《神雕侠侣》金庸</h2><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/神雕侠侣.JPG" style="zoom: 25%;" /><blockquote><p>我自己要做过儿的妻子。   ——小龙女</p></blockquote><p>本来打算这个假期看完金庸，但现在为止只看完了《雪山飞狐》、《射雕英雄传》和这本《神雕侠侣》，射雕和射雕的故事算是连着的，所以如果你要看最好也是按照这个顺序。</p><p>在神雕里面我是喜欢小龙女的，当她在众人面前说出那句我自己要做过儿的妻子的时候，有一种振聋发溃的力量，即使在现在，我们也认为女生更多的是矜持的，爱情里面男性往往承担着更加主动的责任，但我不喜欢这样，如果遇到爱的人，不应该等着对方主动，勇敢地告诉对方——“我们在一起吧！”</p><h2 id="span-class-github-emoji-alias-movie-camera-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f3a5-png-v8-🎥-span-《天使爱美丽》"><span class="github-emoji" alias="movie_camera" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8">🎥</span>《天使爱美丽》</h2><img src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2447590313.webp" style="zoom:50%;" /><p>高中一次偶然间打开这个电影但是没有看完，最近终于抽时间在早上看完了，我喜欢艾米丽的原因应该是我和她很相似的，都是孤独的人，只有自己的世界，唯一不同的是艾米丽会通过很多事情来自娱自乐，但我好像没有这个能力，是那种很治愈的电影。</p><h2 id="span-class-github-emoji-alias-musical-note-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f3b5-png-v8-🎵-span-《母星》麻园诗人"><span class="github-emoji" alias="musical_note" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b5.png?v8">🎵</span>《母星》麻园诗人</h2><iframe allow="autoplay *; encrypted-media *; fullscreen *; clipboard-write" frameborder="0" height="175" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/cn/album/%E6%AF%8D%E6%98%9F/1129318913?i=1129319042"></iframe><p>这个乐队是一个朋友给我推荐的，Apple Music上只有这一张专辑，我听了第一首《母星》就喜欢上了，略有一些颓废的嗓音，到高潮时节奏也像是在嘶吼、呐喊，但又带着无所谓，很符合我的口味。</p><h1><span class="github-emoji" alias="lollipop" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8">🍭</span>碎片思考</h1><ul><li><p><a href="https://blog.csdn.net/weixin_45980783/article/details/105634278">关于Tampermonkey(油猴)的安装和使用的小白教程</a>一个脚本的安装使用，可以用来刷mooc，如果下学期缺钱了我说不定会试试靠这个赚一些钱</p></li><li><p><a href="https://velvetshark.com/articles/2021-a-challenging-year">充满挑战的一年</a>作者开始了12个为期30天的挑战，包括每天发布一些东西、阅读30min纸质书、早上9点前起床、早上洗冷水澡等等，至于为什么是一个月而不是一周，“每周挑战很不错，但几乎在所有情况下，都没有足够的时间看到真正的结果或评估是否可以更长时间地坚持这个习惯。即使你讨厌某件事，也有可能遭受七次痛苦并完成它。整整一个月，如果我意识到我讨厌它并且它对我没有好处，我不太可能做 30 次。”，与之类似的是21天养成一个习惯，所以我打算下月也开始进行我的挑战</p></li></ul><blockquote><p>我还在探索这种每周一记的方式，姑且先开始。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 肆意生长 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 肆意生长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开卷。</title>
      <link href="/2022/07/25/%E5%BC%80%E5%8D%B7%E3%80%82/"/>
      <url>/2022/07/25/%E5%BC%80%E5%8D%B7%E3%80%82/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>夏季未完，我还喜欢你。</title>
      <link href="/2022/07/25/%E5%A4%8F%E5%AD%A3%E6%9C%AA%E5%AE%8C%EF%BC%8C%E6%88%91%E8%BF%98%E5%96%9C%E6%AC%A2%E4%BD%A0%E3%80%82/"/>
      <url>/2022/07/25/%E5%A4%8F%E5%AD%A3%E6%9C%AA%E5%AE%8C%EF%BC%8C%E6%88%91%E8%BF%98%E5%96%9C%E6%AC%A2%E4%BD%A0%E3%80%82/</url>
      
        <content type="html"><![CDATA[<p>这是我度过最漫长的夏天。</p><p>如何才知道自己喜欢上一个人，大概是每天都会想到对方，会忍不住翻看他的资料卡、空间、朋友圈，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>影评|《海上钢琴师》——我已经与这个世界擦肩而过了</title>
      <link href="/2022/07/18/%E5%BD%B1%E8%AF%84-%E3%80%8A%E6%B5%B7%E4%B8%8A%E9%92%A2%E7%90%B4%E5%B8%88%E3%80%8B%E2%80%94%E2%80%94%E6%88%91%E5%B7%B2%E7%BB%8F%E4%B8%8E%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E6%93%A6%E8%82%A9%E8%80%8C%E8%BF%87%E4%BA%86/"/>
      <url>/2022/07/18/%E5%BD%B1%E8%AF%84-%E3%80%8A%E6%B5%B7%E4%B8%8A%E9%92%A2%E7%90%B4%E5%B8%88%E3%80%8B%E2%80%94%E2%80%94%E6%88%91%E5%B7%B2%E7%BB%8F%E4%B8%8E%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E6%93%A6%E8%82%A9%E8%80%8C%E8%BF%87%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>刚刚整理照片看到了之前的一张截图，</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220718221009395.png" alt="image-20220718221009395"></p>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“可以不后期，但要会修图”</title>
      <link href="/2022/07/18/%E2%80%9C%E5%8F%AF%E4%BB%A5%E4%B8%8D%E5%90%8E%E6%9C%9F%EF%BC%8C%E4%BD%86%E8%A6%81%E4%BC%9A%E4%BF%AE%E5%9B%BE%E2%80%9D/"/>
      <url>/2022/07/18/%E2%80%9C%E5%8F%AF%E4%BB%A5%E4%B8%8D%E5%90%8E%E6%9C%9F%EF%BC%8C%E4%BD%86%E8%A6%81%E4%BC%9A%E4%BF%AE%E5%9B%BE%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="影调">影调</h3><blockquote><p>指画面的明暗层次、虚实对比和色彩的色相明暗等之间的关系。通过这些关系，使欣赏者感到光的流动与变化。</p></blockquote><p>影调有三种：高调、中间调和暗调。</p><p>高调通常用来表现一些欢快的事物，中间调就是我们看到的一般的、真实的图片，暗调常常表现一些压抑的事物。如果在调色之前定调定错了，会对照片的整体有很大的影响。从图库里随便抓一张照片来讲，先调一张随便的的动漫风格调色：</p><p><img src="https://cdn.sspai.com/2021/06/21/4454e56c8cf8e4f97da0051503e952c1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2021/06/21/396f31c831a4ffbf2dfbdfac02068312.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>大体上就是调整一下天空的蓝色、高光的橙黄色、树木或者花草从黄色偏为绿色，提高明亮度形成高调的照片，让整个照片很明亮，表现愉悦快乐这样。</p><p>如果想让照片变成BBC素材，那么可以压暗天空，降低高光和阴影，形成暗调的照片：</p><p><img src="https://cdn.sspai.com/2021/06/21/f52a40c92f9f5c53ddf5d74d11027862.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>具体怎么分析这个照片的影调，我们可以根据直方图来看。</p><p>直方图的横向从左到右可以看作从黑渐变到白，分别为黑色色阶、阴影、中间调、高光、白色色阶。</p><p>由于直方图里的波峰集中在横向的高光和白色色阶，所以第一张是高调，第二张波峰集中在阴影部分，所以第二张算暗调。</p><center class="half">      <img src="https://cdn.sspai.com/2021/06/21/b0b61b9fca0647827d0bfb7070eecb69.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" width="200"/>       <img src="https://cdn.sspai.com/2021/06/21/07939ff2cb73bb5b896bb880e85bbbc3.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" width="200"/> </center><p><img src="https://cdn.sspai.com/2021/06/21/b0b61b9fca0647827d0bfb7070eecb69.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2021/06/21/07939ff2cb73bb5b896bb880e85bbbc3.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>总而言之，影调必须契合一张照片的主题，需要表现什么事物就用什么影调。但如果用暗调来表现小孩子们开心打闹的场景、用高调表现一个悲伤的人，一般来讲是不可取的。</p><h3 id="基本调整项">基本调整项</h3><p><img src="https://cdn.sspai.com/2021/06/29/6ce376b085e5184396cfca567a1832ce.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>基本面板上的所有调整项都是重中之重，我个人在用基本面板时基本只用它来调节照片的明度，也就是【**曝光】【高光】【阴影】【白色】【黑色】**这五项，对比度这一项一般是在全部调整完之后才会动一动。为什么调色要讲高光阴影？ 因为一旦照片过曝，里面的颜色细节会完全无法体现。</p><p>**【去除薄雾】**是个很好的工具，属于我最常用功能的之一。但是去除薄雾容易让照片偏色，CMOS或者镜头上的污点也更容易显现，后期调整的时候需要注意在去除薄雾之后进行相应的修正。比如这张雾太大的时候，前景偏色并不严重，但是后面的暗部阴影因为去除薄雾的缘故而有些偏蓝。</p><p><img src="https://cdn.sspai.com/2021/07/07/9e97b52cd718ba1f957554cbf6838a70.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">去除薄雾导致偏色需要后期调整</p><h3 id="混色器-HSL工具">混色器(HSL工具)</h3><p>对于刚才那张去除薄雾拉到满的照片，后景的偏色其实是可以调整回来的，我们可以直观的看到这个暗部偏蓝，所以只需要在【**HSL工具】**里将蓝色的饱和度降低就可以了。</p><p><img src="https://cdn.sspai.com/2021/07/07/f8fae6bdccd262dc79c291a6bb758bd0.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2021/07/07/1a31122cc6f56009a0055e1139a1a658.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>通过HSL工具，我们可以做到对单独颜色的色相、饱和度、明亮度调整。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab基础学习</title>
      <link href="/2022/05/17/matlab%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/17/matlab%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="matlab基础">matlab基础</h3><p>（1）MATLAB的每条命令后，若为<strong>逗号</strong>或<strong>无标点</strong>符号，则显示命令的结果；若命令后为<strong>分号</strong>，则禁止显示结果.</p><p>（2）“<strong>%</strong>” 后面所有文字为注释.</p><p>（3） “<strong>…</strong>”表示续行</p><h2 id="M文件">M文件</h2><p><strong>MATLAB</strong>的内部函数是有限的，有时为了研究某一个函数的各种性态，需要为<strong>MATLAB</strong>定义新函数，为此必须编写函数文件**.** <strong>函数文件是文件名后缀为</strong>M<strong>的文件，这类文件的</strong>第一行必须是一特殊字符<strong>function</strong>开始**，格式为：**</p><p>​     <strong>function</strong>  <strong>因变量名</strong>=<strong>函数名（自变量名）</strong></p><p>​    <strong>函数值的获得必须通过具体的运算实现，并赋给因变量</strong>.</p><p><strong>M</strong>文件建立方法：<strong>1.</strong> <strong>在</strong>MATLAB<strong>中，点</strong>:<strong>File→New</strong> <strong>→</strong> <strong>M-file</strong></p><p>​                <strong>2.</strong> <strong>在编辑窗口中输入程序内容</strong></p><p>​                <strong>3.</strong> <strong>点</strong>File →<strong>Save</strong>，存盘，<strong>M</strong>文件名必须<strong>与函数名一致</strong></p><p>MATLAB的应用程序也以M文件保存</p><p><img src="C:/Users/26746/AppData/Roaming/Typora/typora-user-images/image-20220124154005423.png" alt="image-20220124154005423"></p><h2 id="数组">数组</h2><h4 id="1-创建简单数组">1.创建简单数组</h4><h4 id="2-数组元素的访问">2.数组元素的访问</h4><p>（1）x(i)表示访问数组x的第i个元素</p><p>（2）x(a: b :c)表示访问数组x的第a个元素开始，以步长b到第c个元素。b可以为负数，b确省时为1</p><h2 id="矩阵">矩阵</h2><p><a href="https://www.cnblogs.com/anzhiwu815/p/5907033.html">Matlab 之 find()函数</a></p><p></p><p>[1] find()函数基本功能</p><p>find()函数的基本功能是返回向量或者矩阵中不为0的元素的位置索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 &gt;&gt; X = [1 0 4 -3 0 0 0 8 6];</span><br><span class="line">2 &gt;&gt; ind = find(X)</span><br><span class="line">3 </span><br><span class="line">4 ind =</span><br><span class="line">5 </span><br><span class="line">6      1     3     4     8     9</span><br></pre></td></tr></table></figure><p>其有多种用法，比如返回前k的不为0的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 &gt;&gt; ind = find(X,2)</span><br><span class="line">2 </span><br><span class="line">3 ind =</span><br><span class="line">4 </span><br><span class="line">5      1     3</span><br></pre></td></tr></table></figure><p>也可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 &gt;&gt; ind = find(X,2,&#x27;first&#x27;)</span><br><span class="line">2 </span><br><span class="line">3 ind =</span><br><span class="line">4 </span><br><span class="line">5      1     3</span><br></pre></td></tr></table></figure><p>返回后k个不为0的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 &gt;&gt; ind = find(X,2,&#x27;last&#x27;)</span><br><span class="line">2 </span><br><span class="line">3 ind =</span><br><span class="line">4 </span><br><span class="line">5      8     9</span><br></pre></td></tr></table></figure><p>若X是一个矩阵，索引该如何返回呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> 1 &gt;&gt; X = [1 -3 0;0 0 8;4 0 6]</span><br><span class="line"> 2 </span><br><span class="line"> 3 X =</span><br><span class="line"> 4 </span><br><span class="line"> 5      1    -3     0</span><br><span class="line"> 6      0     0     8</span><br><span class="line"> 7      4     0     6</span><br><span class="line"> 8 </span><br><span class="line"> 9 &gt;&gt; ind = find(X)</span><br><span class="line">10 </span><br><span class="line">11 ind =</span><br><span class="line">12 </span><br><span class="line">13      1</span><br><span class="line">14      3</span><br><span class="line">15      4</span><br><span class="line">16      8</span><br><span class="line">17      9</span><br></pre></td></tr></table></figure><p>这是因为在Matlab在存储矩阵时，是一列一列存储的，我们可以做一下验证:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 &gt;&gt; X(4)</span><br><span class="line">2 </span><br><span class="line">3 ans =</span><br><span class="line">4 </span><br><span class="line">5     -3</span><br></pre></td></tr></table></figure><p>假如你需要按照行列的信息输出该怎么办呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; [r,c] = find(X)</span><br><span class="line">r =</span><br><span class="line">     1</span><br><span class="line">     3</span><br><span class="line">     1</span><br><span class="line">     2</span><br><span class="line">     3</span><br><span class="line"></span><br><span class="line">c =</span><br><span class="line">     1</span><br><span class="line">     1</span><br><span class="line">     2</span><br><span class="line">     3</span><br><span class="line">     3</span><br></pre></td></tr></table></figure><p>如果你还需要输出具体的元素值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> 1 &gt;&gt; [r,c,v] = find(X)</span><br><span class="line"> 2 r =</span><br><span class="line"> 3      1</span><br><span class="line"> 4      3</span><br><span class="line"> 5      1</span><br><span class="line"> 6      2</span><br><span class="line"> 7      3</span><br><span class="line"> 8 </span><br><span class="line"> 9 c =</span><br><span class="line">10      1</span><br><span class="line">11      1</span><br><span class="line">12      2</span><br><span class="line">13      3</span><br><span class="line">14      3</span><br><span class="line">15 </span><br><span class="line">16 v =</span><br><span class="line">17      1</span><br><span class="line">18      4</span><br><span class="line">19     -3</span><br><span class="line">20      8</span><br><span class="line">21      6</span><br></pre></td></tr></table></figure><p>[2] 进阶技巧</p><p>（1）find()函数的功能是找到向量或者矩阵中不为0的元素，那如果需要找到其中满足一定条件的元素，比如，等于4的元素该怎么办呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 &gt;&gt; X = [1 0 4 -3 0 0 0 8 6];</span><br><span class="line">2 &gt;&gt; ind = find(X == 4)</span><br><span class="line">3 </span><br><span class="line">4 ind =</span><br><span class="line">5 </span><br><span class="line">6      3</span><br></pre></td></tr></table></figure><p>在Matlab中，有一个logical数据类型，和C++中的bool值相同。find()函数将logical值0也视为数值0，logical值1视为数值1，因此可以用上面的方法找到矩阵中满足一定条件的元素。</p><p>（2）在程序中，我们经常会以向量中是否包含某一元素为判断条件，比如X中是否有等于9的元素，这时也可以应用find()函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; if isempty(find(X == 9))</span><br><span class="line">        log = 0</span><br><span class="line">    else</span><br><span class="line">        log = 1</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">log =</span><br><span class="line">     0        </span><br></pre></td></tr></table></figure><p>这里需要补充说明下，当输入中没有非0元素时，findf()返回一个空数组。</p><p>[3] 高级技巧</p><p>在进阶技巧（2）中，假如向量X的阶数很高，比如1000万维，如果我们用上面的方法，运行速度会很慢。仔细分析这个语句，我们其实并不希望找到X中等于9的全部元素，我们只想找到其中是否有等于9的元素，所以，我们只需作如下更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 isempty(find(X == 9,1))</span><br></pre></td></tr></table></figure><p>我们做一个小实验：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 X = randi(100,1,10000000);</span><br><span class="line">2 tic</span><br><span class="line">3 for i = 1:100</span><br><span class="line">4     isempty(find(X == 9));</span><br><span class="line">5 end</span><br><span class="line">6 toc</span><br></pre></td></tr></table></figure><p>输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 Elapsed time is 1.954537 seconds.</span><br></pre></td></tr></table></figure><p>更改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 X = randi(100,1,10000000);</span><br><span class="line">2 tic</span><br><span class="line">3 for i = 1:100</span><br><span class="line">4     isempty(find(X == 9,1));</span><br><span class="line">5 end</span><br><span class="line">6 toc</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 Elapsed time is 0.757994 seconds.</span><br></pre></td></tr></table></figure><p>运行效率约是原来的2.5倍。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统|概述</title>
      <link href="/2022/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1>操作系统概述</h1><blockquote><p>前备知识：数据结构、汇编语言、计算机组成原理</p></blockquote><h2 id="1-操作系统的概念">1.操作系统的概念</h2><blockquote><p>一个完整的计算机系统都由两大部分组成：计算机硬件和计算机软件。</p><ul><li>计算机硬件是指计算机系统中由电子、机械、电气、光学和磁学等元器件构成的各种部件和设备，这些部件和设备依据计算机系统结构的要求组成一个有机整体，是软件运行的物质基础。</li><li>计算机软件是指由计算机硬件执行以完成一定任务的程序及其数据。计算机软件包括系统软件和应用软件，系统软件包括操作系统、编译程序、编辑程序、数据库管理系统等；应用软件是为各种应用目的而编制的程序</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220413141728603.png" alt="image-20220413141728603"></p><p>计算机硬件和软件以及软件的各部分之间形成了一种层次结构的关系。</p><p>操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充。它位于硬件与其它软件之间，是所有其他软件运行的基础。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220413142224663.png" alt="image-20220413142224663"></p><blockquote><p>裸机：没有配置软件的计算机。即计算机硬件</p><p>虚拟机：覆盖了软件的机器称为虚拟机或扩展机。</p><p>每当人们在计算机系统上覆盖了一层软件，系统功能便增强了。</p></blockquote><p><strong>配置操作系统的主要目标</strong></p><ul><li><p>提供用户与计算机之间的<strong>接口</strong>，使计算机更易于使用；</p></li><li><p>有效地<strong>控制</strong>和<strong>管理</strong>计算机系统中的各种资源，使之得到更有效的利用；</p></li><li><p><strong>合理地组织</strong>计算机系统的工作流程，以提高资源利用率并改善系统性能。</p></li></ul><p><strong>研究操作系统的两个观点</strong></p><ul><li><p>从用户观点看：操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。</p></li><li><p>从资源管理观点看：操作系统是计算机系统资源的管理者。</p></li></ul><h2 id="2-操作系统的发展">2.操作系统的发展</h2><h3 id="2-1-手工操作阶段">2.1 手工操作阶段</h3><p>**人工操作方式：**46~50年代中后期，计算机系统上没有配置操作系统，人们使用计算机采用手工操作方式。</p><p><strong>用户使用计算机的过程大致如下：</strong></p><p>​         先将程序纸带（或卡片）装入输入机，然后启动输入机把程序和数据送入计算机，接着通过控制台开关启动程序运行，当程序运行完毕，由用户取走纸带和计算结果。</p><p>手工操作方式的特点：</p><ul><li><p>用户独占计算机资源，资源利用率低</p></li><li><p>CPU等待人工操作</p></li></ul><p>手工操作方式的不足：</p><ul><li><p>手工操作的慢速与CPU运算的高速之间的矛盾。此即人机矛盾。</p></li><li><p>CPU的快速与I/O设备慢速的矛盾。</p></li></ul><h3 id="2-2早期批处理">2.2早期批处理</h3><p>为解决人机矛盾，提出从一个作业到下一个作业的自动过度方式，出现批处理技术。</p><blockquote><p>监督程序是一个常驻内存的程序，它管理作业的运行，负责装入和运行各种系统程序来完成作业的自动过渡。</p><p>监督程序是最早的操作系统雏形。</p></blockquote><p>批处理技术是指计算机系统对一批作业自动进行处理的一种技术。</p><p>早期的批处理分为：</p><ul><li><p>联机批处理</p></li><li><p>脱机批处理</p></li></ul><p><strong>联机批处理</strong></p><p>在早期联机批处理系统中，</p><p>​      操作员将若干作业合成一批输入到磁带上，接着监督程序自动把磁带上该批作业的第一个调入内存编译，然后由装配程序把编译结果装入内存启动执行，该作业运行结束后输出结果；第一个作业完成后，监督程序又调入第二个作业并重复上述过程，直到该批作业全部完成。在完成了一批作业后，监督程序又控制输入另一批作业到磁带上，并按上述步骤重复处理。</p><p>联机批处理中采用联机输入/输出，即输入/输出操作在主机控制下进行，其缺点是速度慢。</p><p>为此引入脱机输入/输出技术。</p><p><strong>脱机批处理</strong></p><p>在脱机批处理系统中，除主机外另设一台==外围机（又称卫星机）==。</p><p>​      用户作业通过外围机<strong>输入到磁带</strong>上，而主机只负责从磁带上把作业调入内存，并予以执行。作业完成后，主机负责把结果<strong>输出到磁带</strong>上，然后再由外围机把磁带上的信息在打印机上输出。</p><p><u>脱机输入</u>：将用户程序和数据在一台外围机（又称卫星机）的控制下，预先从低速输入设备输入到磁带上，当CPU需要这些程序和数据时，再直接从磁带机高速输入到内存。</p><p><u>脱机输出</u>：当CPU需要输出时，高速地把结果送到磁带上，然后在外围机的控制下，把磁带上的计算结果由相应的输出设备输出。</p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220412162129472.png" alt="image-20220412162129472" style="zoom: 50%;" /><p>脱机输入/输出：输入/输出操作在外围机的控制下，脱离主机进行。</p><p>脱机I/O优点：</p><ul><li><p>减少了CPU的空闲时间；</p></li><li><p>提高I/O速度。</p></li></ul><p>联机输入/输出：输入/输出操作在主机控制下进行。</p><h3 id="2-3多道程序设计技术">2.3多道程序设计技术</h3><p>单道批处理系统中内存仅一道程序，系统资源无法得到充分利用。下图是单道程序运行实例</p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220412162337701.png" alt="image-20220412162337701" style="zoom:80%;" /><p>将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。</p><p>多道程序运行实例：</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220412162444609.png" alt="image-20220412162444609"></p><p>多道：计算机内存中同时存放多道相互独立的程序。</p><p><strong>宏观上</strong>并行：同时进入系统的多道程序都处于运行过程中，即它们先后开始了各自的运行，但都未运行完毕。</p><p><strong>微观上</strong>串行：内存中的多道程序轮流占有 CPU，交替执行。</p><p>多道批处理系统需要解决的问题</p><ul><li><p>处理机管理：如何分配回收处理机</p></li><li><p>内存管理：内存分配回收，信息保护</p></li><li><p>设备管理：设备分配回收、缓冲管理</p></li><li><p>文件管理：文件存储、共享保护及检索</p></li><li><p>作业管理：作业合理搭配（如CPU型与I/O型）</p></li></ul><blockquote><p>由于批处理系统没有人机交互性，后来又出现了分时系统、实时系统；</p><p>近年来又出现了个人计算机操作系统、网络操作系统、分布式操作系统、嵌入式操作系统等。</p><p>推动操作系统发展的因素主要可归结为：</p><ul><li><p>硬件技术更新</p></li><li><p>应用需求扩大</p></li></ul></blockquote><h2 id="3-操作系统的类型">3.操作系统的类型</h2><h3 id="3-1批处理系统">3.1批处理系统</h3><p>把一批作业以脱机输入方式输入到磁带上，并在系统中配置监督程序，在它的控制下，使一批作业一个接一个地连续处理，其过程为：</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220412184146348.png" alt="image-20220412184146348"></p><p>内存中始终只保持一道作业的批处理系统称为单道批处理系统。</p><p>单道批处理系统的特征：</p><ul><li><p>自动性：自动依次运行，无人工干预</p></li><li><p>顺序性：完成顺序与进入顺序相同</p></li><li><p>单道性：内存只有一道作业</p></li></ul><p>在批处理系统中引入多道程序设计技术后就形成了多道批处理系统。</p><p>多道批处理系统的特征：</p><ul><li><p>多道性：计算机内存中同时存放几道相互独立的程序。</p></li><li><p>无序性：进入顺序与完成顺序无严格对应关系。</p></li><li><p>调度性：作业从提交到完成经历两级调度：作业调度、进程调度。</p></li></ul><h3 id="3-2分时系统">3.2分时系统</h3><blockquote><p>推动分时系统发展的主要动力是用户需求，即：</p><ul><li><p>人机交互：控制程序运行</p></li><li><p>共享主机：机器昂贵，多人使用较经济</p></li><li><p>方便用户上机： 可以通过终端提交作业</p></li></ul></blockquote><p>所谓分时技术就是：</p><p>把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p><p>若某个作业在分配给它的时间片内不能完成其计算，则该作业暂停运行，把处理机让给另一个作业使用，等待下一轮时再继续其运行。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220412184844590.png" alt="image-20220412184844590"></p><p>在操作系统中采用分时技术就形成了分时操作系统。</p><p>在分时操作系统中，一个计算机和许多终端设备连接，每个用户可以通过终端向系统发出命令，请求完成某项工作，而系统则分析从终端设备发来的命令，完成用户提出的要求，然后用户再根据系统提供的运行结果，向系统提出下一步请求，这样重复上述交互会话过程，直到用户完成全部工作为止。</p><p>分时系统实现中的关键问题</p><ul><li><p>及时接收：设置多路卡</p></li><li><p>及时处理：时间片轮转</p></li></ul><p>分时操作系统的特征：</p><ul><li><p>多路性、也称同时性：一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。</p></li><li><p>交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。</p></li><li><p>独立性：<u>用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样</u>。</p></li><li><p>及时性：用户请求能在很短时间内获得响应。</p></li></ul><h3 id="3-3实时系统">3.3实时系统</h3><p>实时系统是指系统能及时响应外部事件的请求，在规定的时间范围内完成对该事件的处理，并控制实时任务协调一致地运行。</p><p>分类：</p><ul><li><p>实时控制系统：指以计算机为中心的生产过程控制系统。</p></li><li><p>实时信息处理系统：要求对信息进行实时处理的系统。</p></li></ul><p>特征：</p><ul><li><p>及时性：响应时间由控制对象决定。</p></li><li><p>可靠性：高可靠性。</p></li></ul><blockquote><p>如果一个操作系统兼有批处理、分时和实时操作系统三者或其中两者的功能，则称该操作系统为通用操作系统。</p></blockquote><h3 id="3-4其他操作系统类型">3.4其他操作系统类型</h3><ul><li>嵌入式操作系统</li><li>个人计算机操作系统</li><li>网络操作系统</li><li>分布式操作系统</li></ul><p><strong>嵌入式操作系统</strong></p><p>对整个智能芯片以及它所控制的各种部件模块等资源进行统一调度、指挥和控制的系统软件称为嵌入式操作系统。</p><p>嵌入式系统几乎包括了生活中的所有电器设备，如掌上PDA、手机、微波炉、数字相机、自动售货机、工业自动化仪表与医疗仪器等。</p><p><strong>个人计算机操作系统</strong></p><p>个人计算机操作系统主要供个人使用，它功能强，价格便宜，能满足一般人工作、学习、游戏等方面的需求。</p><p>个人计算机操作系统的主要特点是计算机在某一段时间内为单个用户服务，采用图形界面人机交互的工作方式，界面友好，使用方便。</p><p><strong>网络操作系统</strong></p><p>网络操作系统是基于计算机网络的，是在各种计算机操作系统上按网络体系结构协议标准开发的软件</p><p>包括网络管理、通信、资源共享、系统安全和各种网络应用服务，其目标是互相通信及资源共享。</p><p><strong>分布式操作系统</strong></p><p>分布式系统是指多个分散的处理单元经互连网络连接而形成的系统，其中每个处理单元既具有高度自治性又相互协同，能在系统范围内实现资源管理、任务动态分配，并能并行地运行分布式程序。</p><p>配置在分布式系统上的操作系统称为分布式操作系统。</p><blockquote><p>分布式操作系统与网络操作系统的比较</p><ul><li><p>分布性：分布式系统中的处理和控制功能较均匀<strong>分布</strong>在系统的各个站点上；而网络系统中控制功能大多<strong>集中</strong>在网络服务器上。</p></li><li><p>并行性：分布式系统中的<strong>任务分配</strong>程序可将多个任务分配到系统的多个处理单元上并行执行；而网络系统中<strong>每个用户的任务通常在自己的计算机</strong>上处理。</p></li><li><p>透明性：分布式系统能很好隐藏系统内部的实现细节，对象的物理位置、并发控制及系统故障等对用户是<strong>透明</strong>的；而网络系统中主要是操作实现上的透明。</p></li><li><p>共享性：分布式系统中<strong>各站点上的资源可供所有用户共享</strong>；而网络系统中共享的资源主要设置在服务器上。</p></li><li><p>健壮性：由于分布式系统的<strong>控制功能分布</strong>，当站点故障时可以通过容错来重构系统以保证系统正常运行；而网络系统中控制功能主要集中在服务器上，使系统具有潜在的不可靠性。</p></li></ul></blockquote><h2 id="4-操作系统的特征">4.操作系统的特征</h2><ul><li>并发性</li><li>共享性</li><li>虚拟性</li><li>不确定性</li></ul><h3 id="4-1-并发">4.1 并发</h3><p>并行：是指两个或多个事件在同一<strong>时刻</strong>发生。</p><p>并发：是指两个或多个事件在<u>同一<strong>时间</strong>间隔内</u>发生。</p><p>在多道程序环境下，并发是指宏观上一段时间内有多道程序在同时运行，但在单处理机系统中，微观上这些程序是交替执行的。</p><h3 id="4-2-共享">4.2 共享</h3><p>共享是指系统中的资源可供多个并发执行的进程共同使用。</p><p>有两种资源共享方式：</p><ul><li><p>互斥共享：一段时间只允许一个进程访问</p></li><li><p>同时访问：一段时间允许多个进程访问</p></li></ul><blockquote><p>并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。</p><ul><li><p>一方面，资源的共享是以程序的并发执行为条件的，若系统不允许程序的并发执行，自然不存在资源共享问题；</p></li><li><p>另一方面，若系统不能对资源共享实施有效的管理，也必将影响到程序的并发执行，甚至根本无法并发执行。</p></li></ul></blockquote><h3 id="4-3-虚拟性">4.3 虚拟性</h3><p>虚拟是指把一个物理上的实体变为多干个逻辑上的对应物。</p><p>如分时技术、虚拟内存</p><h3 id="4-4-不确定">4.4 不确定</h3><p>不确定性表现为多个作业的执行顺序和每个作业的执行时间是不确定的。</p><p>不确定性也称异步性。</p><h2 id="5-操作系统的作用与功能">5.操作系统的作用与功能</h2><h3 id="5-1操作系统的作用">5.1操作系统的作用</h3><p>操作系统的作用</p><ul><li><p>操作系统是用户与计算机之间的接口</p></li><li><p>操作系统为用户提供虚拟机</p></li><li><p>操作系统是计算机系统的管理者</p></li></ul><h3 id="5-2操作系统的功能">5.2操作系统的功能</h3><p>操作系统的功能</p><p>处理机管理</p><p>存储器管理</p><p>设备管理</p><p>文件管理</p><h2 id="7-操作系统的运行环境和内核结构">7.操作系统的运行环境和内核结构</h2><h3 id="7-1操作系统的运行环境">7.1操作系统的运行环境</h3><p>计算机硬件所提供的支持，构成了现代操作系统的运行环境。包括：</p><ul><li><p>处理机</p></li><li><p>存储器</p></li><li><p>设备</p></li><li><p>时钟</p></li><li><p>中断等</p></li></ul><h3 id="7-2-操作系统的内核结构">7.2 操作系统的内核结构</h3><p>操作系统是一个大型系统软件，其内核结构主要有三种：</p><ul><li><p>模块结构</p></li><li><p>层次结构</p></li><li><p>微内核结构</p></li></ul><h1>练习题</h1><p>1．单项选择题<br>（1）在脱机批处理方式中，有一台负责与外部设备交换信息的计算机，一般称之为____。B</p><p>A．终端处理机  C．客户机   B．外围处理机 D．服务处理机</p><p>（2）在计算机系统中，操作系统是____。C</p><p>A. 一般应用软件 B. 核心系统软件 C. 用户应用软件 D. 硬件</p><p>（3）实时操作系统必须在____内处理来自外部的事件。C</p><p>A. 一个机器周期 B. 被控制对象规定时间C. 周转时间 D. 时间片</p><p>（4）在设计实时操作系统时，不重点考虑的是____。B</p><p>A．及时响应，快速处理 B．有高安全性C．提高系统资源的利用率 D．有高可靠性</p><p>（5）操作系统提供给编程人员的接口是____。C</p><p>A. 库函数 B. 高级语言C. 系统调用 D. 子程序</p><p>（6）操作系统中最基本的两个特征是____B</p><p>A. 并发和不确定 B. ==并发和共享==<br>C. 共享和虚拟 D. 虚拟和不确定</p><p>（7）下述关于并发性的叙述中正确的是____。C</p><p>A. 并发性是指若干事件在同一时刻发生<br>B. 并发性是指若干事件在不同时刻发生<br>==C. 并发性是指若干事件在同一时间间隔内发生==<br>D. 并发性是指若干事件在不同时间间隔内发生</p><p>（8）一个多道批处理系统，提高了计算机系统的资源利用率，同时____。B</p><p>A. 减少各个作业的执行时间 B. 增加了单位时间内作业的吞吐量<br>C. 减少了部分作业的执行时间 D. 减少单位时间内作业的吞吐量</p><p>（9）分时系统追求的目标是____。</p><p>A. 充分利用 I/O 设备 B. ==快速响应用户==<br>C. 提供系统吞吐率 D. 充分利用内存</p><p>（10）批处理系统的主要缺点是____。</p><p>A. 系统吞吐量小 B. CPU 利用率不高<br>C. 资源利用率低 D. 无交互能力</p><p>（11）从用户的观点看，操作系统是____。A</p><p>A. 用户与计算机之间的接口<br>B. 控制和管理计算机资源的软件<br>C. 由若干层次的程序按一定的结构组成的有机体<br>D. 合理地组织计算机工作流程的软件</p><p>（12）所谓____是指将一个以上的作业放入内存，并且同时处于运行状态，这些作业共享处理机的时间和外围设备等资源。</p><p>A. 多重处理 B. 多道程序设计<br>C. 实时处理 D. 共行执行</p><p>2．填空题<br>（1）操作系统是计算机系统中的一个 ① ，它管理和控制计算机系统中的 ② 。<br>（2）如果一个操作系统兼有批处理、分时和实时操作系统三者或其中两者的功能，这样的操作系统称为_____。<br>（3）没有配置__软件__的计算机称为裸机。<br>（4）在主机控制下进行的输入/输出操作称为_____操作。<br>（5）如果操作系统具有很强交互性，可同时供多个用户使用，系统响应比较及时，则属于 ① 类型；如果 OS 可靠，响应及时但仅有简单的交互能力则属于 ② 类型；如果 OS 在用户提交作业后，不提供交互能力，它所追求的是计算机资源的高利用率，大吞吐量和作业流程的自动化，则属于 ③ 类型。<br>（6）操作系统的基本特征是 ① 、 ② 、 ③ 、 ④ 。并发、共享、虚拟、不确定<br>（7）实时系统按应用的不同分为 ① 和 ② 两种。<br>（8）在单处理机系统中，多道程序运行的特点是多道、 ① 和 ② 。</p><p>3．解答题<br>（1）什么是操作系统？从资源管理的角度看，操作系统应具有哪些功能？<br>（2）操作系统有哪几种基本类型？它们各有何特点？<br>（3）什么是多道程序设计技术？多道程序设计技术的特点是什么？<br>（4）简述并发与并行的区别。<br>（5）简述操作系统在计算机系统中的位置。</p><blockquote><p>操作系统在<a href="https://it.china-b.com/">计算机</a>系统中处于硬件层之上，是硬件层的第一次扩充。在这一层上实现了操作系统的全部功能，并提供了相应的接口。 操作系统的作用是：1)提高<a href="https://it.china-b.com/">计算机</a>系统的效率。 2)提高<a href="https://it.china-b.com/">计算机</a>系统资源的利用率。 3)方便用户使用<a href="https://it.china-b.com/">计算机</a>。</p></blockquote><p>（6）操作系统有哪些特征？</p><blockquote><p>并发性：</p></blockquote><p>（7）操作系统是随着多道程序设计技术的出现逐步发展起来的，要保证多道程序的正确运行，在技术上要解决哪些基本问题？<br>（8）用户与操作系统之间存在哪几种接口？</p><p>4．应用题<br>（1）有一台计算机，具有1MB 内存，操作系统占用200KB，每个用户进程各占200KB。如果用户进程等待I/O 的时间为80%，若增加1MB 内存，则CPU 的利用率提高多少？</p><p>（2）一个计算机系统，有一台输入机和一台打印机，现有两道程序投入运行，且程序<br>A先开始做，程序B后开始运行。程序A的运行轨迹为：计算50ms、打印100ms、再计算50ms、打印100ms，结束。程序B的运行轨迹为：计算50ms、输入80ms、再计算100ms，结束（假设开始时刻为0）。试说明：<br>① 两道程序运行时，CPU有无空闲等待？若有，在哪段时间内等待？为什么会等待？<br>② 程序A、B 有无等待CPU 的情况？若有，指出发生等待的时刻。</p><p>（3）若程序Pa和Pb单独执行时所需时间分别是Ta和Tb。Ta＝1小时，Tb＝1.5小时，<br>其中处理器工作时间分别 Ta＝18分钟，Tb＝27分钟。<br>①单道运行时，处理器的利用率是多少？<br>②如果采用多道程序设计方法，让Pa，Pb并行工作，当不考虑计算系统开销时，处理器利用率达到50％；请问：当考虑到15分钟系统开销时，处理器的利用率是多少?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>辩论|立论切入点</title>
      <link href="/2022/05/14/%E8%BE%A9%E8%AE%BA-%E7%AB%8B%E8%AE%BA%E5%88%87%E5%85%A5%E7%82%B9/"/>
      <url>/2022/05/14/%E8%BE%A9%E8%AE%BA-%E7%AB%8B%E8%AE%BA%E5%88%87%E5%85%A5%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1>包容性立论与冲突性立论</h1><p>女朋友和妈掉水里该救哪个</p><ol><li>二者冲突时更应该选择哪个</li></ol><p><strong>忽略了紧迫性与重要性的区别</strong>**，**在冲突语境下，除了选择更高的价值排序，也有可能是选择一个更紧迫的选项，比如上厕所和学习。这也就是陈铭曾经对肖磊说的“冲突只能比出谁更急，比不出谁更重要。”</p><p>​           2.<strong>如果提升/注重A能带来AB的共赢，那么就是A重要。</strong></p><p>比如毛主席就说过，存人失地，人地皆存。如果人民保护好了，那么地盘和人就都有了。这就是包容性比较，提升A能带来AB。这里就是之前提过的奇袭流的智慧。</p><p>我知道你一定会打冲突语境，我就反其道而行之，要你论证为什么一定是冲突的，为什么紧迫等于重要如此种种。而我方能找的资料就更多了，只需要把A带来的好处适当延伸，让它能覆盖到B就可以完成论证。</p><p>对于部分难找冲突的辩题，这种立论方法就尤其奏效了。但是也要注意一点，这里是A的利好能够涵盖到B，如果用力过猛，打成了A就是B，那就有包辩题的嫌疑了。</p><blockquote><p>辩题是：<strong>建设智慧城市，国家扶持/资本投入哪一个更重要。</strong></p><p>如果采用冲突立论，这道题就变成了：**纯粹的公办智慧城市和民办智慧城市的比较，**资料会变得异常的难查。</p><p>但是换第二个视角，这道题的破题就变成了：国家扶持为主能带来国家和民营企业双赢，而单纯的资本投入为主带不来国家利益。(或者反过来说)</p></blockquote><p>练习</p><ol><li><p>给岁月以文明/给文明以岁月。</p></li><li><p>建设双一流高校，资金/政策支持更重要。</p></li><li><p>当今教育更应该培养通才/专才。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>影评|《小姐》——爱情片的三级反转</title>
      <link href="/2022/05/12/%E5%BD%B1%E8%AF%84-%E3%80%8A%E5%B0%8F%E5%A7%90%E3%80%8B%E2%80%94%E2%80%94%E7%88%B1%E6%83%85%E7%89%87%E7%9A%84%E4%B8%89%E7%BA%A7%E5%8F%8D%E8%BD%AC/"/>
      <url>/2022/05/12/%E5%BD%B1%E8%AF%84-%E3%80%8A%E5%B0%8F%E5%A7%90%E3%80%8B%E2%80%94%E2%80%94%E7%88%B1%E6%83%85%E7%89%87%E7%9A%84%E4%B8%89%E7%BA%A7%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统|设备管理</title>
      <link href="/2022/05/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/"/>
      <url>/2022/05/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>除了CPU和内存之外，其他大部分硬件设备称之为外部设备</p><p>设备管理的目标就是建立一个一致的、通用的设备访问接口，使得每个用户都能方便、高效、安全地使用外部设备，而不用关注每种设备的固有特性。</p><p>在设备管理中，普遍使用I/O 中断、缓冲器管理、通道、设备驱动调度等多种技术，这些措施较好地克服了由于外部设备和CPU速度的不匹配所引起的问题，使主机和外设并行工作，提高了使用效率。本章主要介绍设备分类、I/O控制方式、缓冲技术及I/O软件的层次结构  </p></blockquote><h1 id="一、设备管理概述"><a href="#一、设备管理概述" class="headerlink" title="一、设备管理概述"></a>一、设备管理概述</h1><h2 id="1、设备分类"><a href="#1、设备分类" class="headerlink" title="1、设备分类"></a>1、设备分类</h2><p>1．按设备的使用特性分类</p><ul><li>存储设备是计算机用来保存各种信息的设备。如磁盘、磁带等。</li><li>I/O设备是向CPU传输信息或输出经过CPU加工处理信息的设备。如键盘是输入设备，显示器和打印机是输出设备。</li></ul><p>2 按设备的共享属性分类</p><ul><li>独占设备是指在一段时间内只允许一个用户进程使用的设备。系统一旦把这类设备分配给某个进程后，便由该进程独占，直至用完释放。多数低速I/O设备都属于独占设备，如打印机就是典型的独占设备，若几个用户进程共享一台打印机，则它们的输出结果可能交织在一起，难以识别。</li><li><p>共享设备是指在一段时间内允许多个进程使用的设备。如磁盘就是典型的共享设备，若干个进程可以交替地从磁盘上读写信息，当然，在每一个时刻，一台设备只允许一个用户进程访问。</p></li><li><p>虚拟设备是指通过虚拟技术将一台独占设备改造成若干台逻辑设备，供若干个用户进程同时使用，通常把这种经过虚拟技术处理后的设备称为虚拟设备。虚拟设备实际上是不存在的。实现虚拟设备的关键技术是分时技术。</p></li></ul><p>3．按信息交换单位分类</p><ul><li>字符设备处理信息的基本单位是字符。如键盘、打印机和显示器是字符设备。</li><li>块设备处理信息的基本单位是字符块。一般块的大小为512B～4KB，如磁盘、磁带等是块设备。在Unix等很多操作系统中，就是按照块设备和字符设备来管理设备的。  </li></ul><p>4.按设备从属关系分类</p><ul><li>系统设备：指在操作系统生成时已经登记在系统中的标准设备。如键盘、显示器、打印机等。</li><li>用户设备：指操作系统生成时未登记入系统的非标准设备。如鼠标、绘图仪，扫描仪等</li></ul><h2 id="2、设备管理的任务和功能"><a href="#2、设备管理的任务和功能" class="headerlink" title="2、设备管理的任务和功能"></a>2、设备管理的任务和功能</h2><p>设备管理的主要任务是完成用户提出的I/O请求，为用户分配I/O设备，提高I/O设备的利用率，方便用户使用I/O设备。</p><p>为了完成上述任务，设备管理应具备以下功能：<br>1．设备分配。按照设备类型和相应的分配算法决定将I/O设备分配给哪一个要求使用该设备的进程。如果在I/O设备和CPU之间还存在着设备控制器和通道，则还需要分配相应的设备控制器和通道，以保证I/O设备与CPU之间有传递信息的通路。凡未分配到所需设备的进程应放入一个等待队列。为了实现设备分配，系统中应设置一些数据结构，用于记录设备的状态。</p><p>2．设备处理。设备处理程序实现CPU和设备控制器之间的通信。进行I/O操作时，由CPU向设备控制器发出I/O指令，启动设备进行I/O操作；当I/O操作完成时能对设备发来的中断请求做出及时的响应和处理。</p><p>3．缓冲管理。设置缓冲区的目的是缓和CPU与I/O速度不匹配的矛盾。缓冲管理程序负责完成缓冲区的分配、释放及有关的管理工作。</p><p>4．设备独立性。设备独立性又称设备无关性，是指应用程序独立于物理设备。用户在编制应用程序时，要尽量避免直接使用实际设备名。如果程序中使用了实际设备名，则当该设备没有连接在系统中或者该设备发生故障时，用户程序无法运行，若要运行此程序则需要修改程序。如果用户程序不涉及实际设备而使用逻辑设备，那么它所要求的输入/输出便与物理设备无关。设备独立性可以提高用户程序的可适应性，使程序不局限于某个具体的物理设备。  </p><h2 id="3、设备控制器与I-O通道"><a href="#3、设备控制器与I-O通道" class="headerlink" title="3、设备控制器与I/O通道"></a>3、设备控制器与I/O通道</h2><p>1.设备控制器</p><ul><li><p>概念</p><p>设备一般由机械和电子两部分组成，设备的电子部分通常称为设备控制器。在微型计算机中，又称为接口卡。 </p><p>控制器处于CPU与I/O设备之间，它接收从CPU发来的命令，并去控制I/O设备工作</p><p>设备控制器是一个可编址设备，当它控制一个设备时有一个设备地址；当它控制多个设备则应有多个设备地址。</p></li><li><p>功能</p><p>接收和识别来自CPU的命令：用控制寄存器。</p><p>实现CPU与控制器、控制器与设备之间的数据交换：用数据寄存器。</p><p>记录设备的状态供CPU查询：用状态寄存器。</p><p>识别控制的每个设备地址：用地址译码器。</p></li><li><p>设备控制器由三部分组成：</p><p>设备控制器与处理机的接口：实现CPU与设备控制器之间的通信。</p><p>设备控制器与设备的接口：实现设备与设备控制器之间的通信。</p><p>I/O逻辑：实现对设备的控制，它负责接收命令、对命令进行译码、再根据译出的命令控制设备。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511100413704.png" alt="image-20220511100413704"></p><p>2.I/O通道</p><p>I/O通道是专门负责输入/输出工作的处理机。它具有执行I/O指令的能力，并通过执行通道程序来控制I/O操作。</p><p>通道有自己的指令系统，该指令系统比较简单，一般只有数据传送指令、设备控制指令等。</p><p>通道程序：通道指令构成的程序。</p><p>通道与一般处理机的区别：</p><ul><li><p>指令类型单一</p></li><li><p>没有内存</p></li></ul><p>根据信息交换方式的不同进行分类</p><ul><li><p>字节多路通道：该通道以字节交换方式工作。它通常含有若干个非分配型子通道，每个子通道连接一台I/O设备，这些子通道按时间片轮转方式共享主通道，每次交换完一个字节后便轮换。</p><p>一般用于连接中、低速I/O设备。</p></li><li><p>数据选择通道：又称数组选择通道，该通道含有一个分配型子通道，在一段时间内只能执行一个通道程序，控制一台设备传送一批数据，当一道程序执行完后，再选择与通道相连的另一台设备。</p><p>一般用于连接高速I/O设备。</p></li><li><p>数据多路通道：又称数组多路通道，该通道是前两种通道的结合，它以分时方式执行几个通道程序，每执行一个通道程序的一条通道指令控制传送一组数据后，就转向另一个通道程序。</p><p>一般用于连接高、中速I/O设备。</p></li></ul><h2 id="4、I-O系统结构"><a href="#4、I-O系统结构" class="headerlink" title="4、I/O系统结构"></a>4、I/O系统结构</h2><ul><li><p>微机型I/O系统结构</p><p>微型机I/O系统多采用总线I/O系统结构，CPU   和内存直接连接到总线上，I/O设备通过设备控制器连接到总线上。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511094711216.png" alt="image-20220511094711216"></p><ul><li><p>主机I/O系统结构</p><p>通常为主机配置的设备较多，若所有设备都通过总线与CPU通信则总线和CPU的负担过重。为此在I/O系统结构中增加了一级I/O通道。 </p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511094830762.png" alt="image-20220511094830762"></p><p>因通道价格较贵，使系统内设置的通道少，这样通道往往成为I/O的瓶颈。解决瓶颈问题的办法是采用多通路配置方案。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511095718278.png" alt="image-20220511095718278"></p><p>由此可见，在多通路I/O系统中，不会因某一通道或某一控制器被占用而阻塞存储器和设备之间的数据传输。仅当两个通道或两个控制器都被占用时，才阻塞存储器和设备交换信息。采用多通路的I/O系统也可以提高系统的可靠性。例如，若通道1出现了故障，系统仍然可以使用通道2来访问设备  </p><h1 id="二、输入输出控制方式"><a href="#二、输入输出控制方式" class="headerlink" title="二、输入输出控制方式"></a>二、输入输出控制方式</h1><h1 id="三、设备分配"><a href="#三、设备分配" class="headerlink" title="三、设备分配"></a>三、设备分配</h1><blockquote><p>当进程提出I/O请求时，设备分配程序便按照一定的策略为其分配设备，同时还应分配相应的控制器和通道，以保证CPU与设备之间的通信。</p></blockquote><h2 id="3-1、设备分配中的数据结构"><a href="#3-1、设备分配中的数据结构" class="headerlink" title="3.1、设备分配中的数据结构"></a>3.1、设备分配中的数据结构</h2><p> 1.设备控制表（DCT）</p><p>系统为每个设备配置一张设备控制表，用于记录设备的特性及与I/O控制器连接的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511102016509.png" alt="image-20220511102016509" style="zoom:80%;" /></p><p>2.控制器控制表（COCT）</p><p>控制器控制表也是每个控制器一张，它反映I/O控制器的使用状态以及和通道的连接情况。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511102109703.png" alt="image-20220511102109703" style="zoom:80%;" /></p><p>3.通道控制表（CHCT）</p><p>每个通道都配有一张通道控制表，它反映通道的使用状态。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511102312983.png" alt="image-20220511102312983" style="zoom:80%;" /></p><p>4.系统设备表（SDT）</p><p>系统设备表整个系统一张，它记录了系统中所有物理设备的情况，每个物理设备占一个表目。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220511102350374.png" alt="image-20220511102350374" style="zoom:80%;" /></p><h1 id="四、I-O设备管理软件"><a href="#四、I-O设备管理软件" class="headerlink" title="四、I/O设备管理软件"></a>四、I/O设备管理软件</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统|文件管理</title>
      <link href="/2022/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2022/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文件系统的相关概念  文件的逻辑和物理结构  磁盘调度算法  文件存储空间的管理   文件的共享和保护</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>肆意生长|01期-摇摇晃晃后决定开始的一周</title>
      <link href="/2022/04/24/%E8%82%86%E6%84%8F%E7%94%9F%E9%95%BF-01%E6%9C%9F-%E6%91%87%E6%91%87%E6%99%83%E6%99%83%E5%90%8E%E5%86%B3%E5%AE%9A%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2022/04/24/%E8%82%86%E6%84%8F%E7%94%9F%E9%95%BF-01%E6%9C%9F-%E6%91%87%E6%91%87%E6%99%83%E6%99%83%E5%90%8E%E5%86%B3%E5%AE%9A%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<p>好吧，如你所见，我还没有开始。——2022年7月25日</p>]]></content>
      
      
      <categories>
          
          <category> 肆意生长 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 肆意生长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研日记|开始就不算晚2022.04.23晚</title>
      <link href="/2022/04/23/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0-%E5%BC%80%E5%A7%8B%E5%B0%B1%E4%B8%8D%E7%AE%97%E6%99%9A2022-04-23%E6%99%9A/"/>
      <url>/2022/04/23/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0-%E5%BC%80%E5%A7%8B%E5%B0%B1%E4%B8%8D%E7%AE%97%E6%99%9A2022-04-23%E6%99%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><div class='checkbox'><input type="checkbox" />            <p>数学分析视频</p>            </div><div class='checkbox'><input type="checkbox" />            <p>高等代数视频</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>数学</p>            </div><div class='checkbox'><input type="checkbox" />            <p>green， 习题集</p>            </div><div class='checkbox'><input type="checkbox" />            <p>yellow ，高代习题</p>            </div><h1 id="始言"><a href="#始言" class="headerlink" title="始言"></a>始言</h1><blockquote><p>一以贯之的努力，不得懈怠的人生。每天的微小积累会决定最终结果，这就是答案。</p></blockquote><p>多少次了，每当我看到这句话都会被触碰</p><blockquote><p>“林朝タ小姐，在这漫长而美好的一生里，如果你真找到了想做的事情，那么无论何时你決定再次开始，都不算晚。”</p></blockquote><p>把这句话再次送给自己，我找到了自己想做的事情，并且现在还不算太晚，既然已经决定要开始，那就要拿出所有的努力！</p><h1 id="每日记录"><a href="#每日记录" class="headerlink" title="每日记录"></a>每日记录</h1><h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly（五）报错解决</title>
      <link href="/2022/04/22/hexo-butterfly%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2022/04/22/hexo-butterfly%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>解决 Hexo Cannot find module ‘./build/Release/DTraceProviderBindings’ 错误</p><p>hexo报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Cannot find module &#x27;hexo&#x27; from &#x27;D:\xing&#x27;</span><br><span class="line">Error: Cannot find module &#x27;./build/Release/DTraceProviderBindings&#x27;</span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly（四）锦上添花</title>
      <link href="/2022/04/22/hexo-butterfly%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/04/22/hexo-butterfly%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>把hexo源码托管到github</h1><p>根据Hexo搭建步骤搭建完Hexo后，通过Hexo d指令可把生成的文件提交到指定git仓库上，但注意这只是提交的生成后的内容，而对于Hexo本身的源码，以及我们对源码做的修改是没法进行版本管理的，且一旦更换机器，我们便失去了原本生成发布的环境。为了方便对源码进行版本管理，且更换机器环境后可以快速部署我们的博客环境，可根据上面链接操作，把Hexo源码托管在Github Pages的仓库的另一个分支上，此后若更换环境，只需要把该仓库分支chekout下来，并在该仓库本地目录下输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><p>即可完成新环境下的Hexo部署</p><p>git branch -m source blog<br>git fetch origin<br>git branch -u origin/blog blog<br>git remote set-head origin -a</p><h1>hexo添加emoji表情支持</h1><h2 id="安装插件">安装插件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-emoji</span><br></pre></td></tr></table></figure><h2 id="配置">配置</h2><p>在站点配置文件 .config.yml 中增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">emoji:</span><br><span class="line">  enable: true</span><br><span class="line">  className: github-emoji</span><br><span class="line">  styles:</span><br><span class="line">  customEmojis:</span><br></pre></td></tr></table></figure><p>输入对应的表情编码就可以了<span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h1>文章草稿</h1><p>创建草稿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &quot;new draft&quot;</span><br></pre></td></tr></table></figure><p>启动本地博客，可以将草稿内容加到显示的网页中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --drafts</span><br></pre></td></tr></table></figure><p>会在source/_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//如果你希望强行预览草稿，更改配置文件：</span><br><span class="line">render_drafts: true</span><br><span class="line"></span><br><span class="line">//或者，如下方式启动server：</span><br><span class="line">$ hexo server --drafts</span><br><span class="line"></span><br><span class="line">//把草稿变成文章，或者页面：</span><br><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h1>文章置顶</h1><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">样式</button></li><li class="tab"><button type="button" data-href="#-2">实现</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220725165750960.png" alt="image-20220725165750960" style="zoom:50%;" /><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>1、在博客根目录<code>[xing]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>2、在需要置顶的文章中设置<code>top: true/数字</code>数字越大，文章越靠前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo置顶</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly（三）标签外挂</title>
      <link href="/2022/04/22/hexo-butterfly%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/04/22/hexo-butterfly%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>tag-plugins-plus</h1><blockquote><p>原生 Butterfly 主题不支持部分标签外挂，<a href="https://www.npmjs.com/package/hexo-butterfly-tag-plugins-plus">https://www.npmjs.com/package/hexo-butterfly-tag-plugins-plus</a></p></blockquote><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASH</span><br><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure><p>考虑到hexo自带的markdown渲染插件hexo-renderer-marked与外挂标签语法的兼容性较差，建议您将其替换成hexo-renderer-kramed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASH</span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例</p><p>在站点配置文件_config.yml或者主题配置文件_config.butterfly.yml中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line"></span><br><span class="line"># tag-plugins-plus</span><br><span class="line"># see https://akilar.top/posts/615e2dec/</span><br><span class="line">tag_plugins:</span><br><span class="line">  enable: true # 开关</span><br><span class="line">  priority: 5 #过滤器优先权</span><br><span class="line">  issues: false #issues标签依赖注入开关</span><br><span class="line">  link:</span><br><span class="line">    placeholder: /img/link.png #link_card标签默认的图标图片</span><br><span class="line">  CDN:</span><br><span class="line">    anima: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css #动画标签anima的依赖</span><br><span class="line">    jquery: https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js #issues标签依赖</span><br><span class="line">    issues: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js #issues标签依赖</span><br><span class="line">    iconfont: //at.alicdn.com/t/font_2032782_8d5kxvn09md.js #参看https://akilar.top/posts/d2ebecef/</span><br><span class="line">    carousel: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span><br><span class="line">    tag_plugins_css: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span><br></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">issues</td><td style="text-align:left">true/false</td><td style="text-align:left">【可选】issues标签控制开关，默认为false</td></tr><tr><td style="text-align:left">link.placeholder</td><td style="text-align:left">【必选】link卡片外挂标签的默认图标</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">CDN.anima</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】动画标签anima的依赖</td></tr><tr><td style="text-align:left">CDN.jquery</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.issues</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.iconfont</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】iconfont标签symbol样式引入</td></tr><tr><td style="text-align:left">CDN.carousel</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】carousel旋转相册标签鼠标拖动依赖</td></tr><tr><td style="text-align:left">CDN.tag_plugins_css</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】外挂标签样式的CSS依赖</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly（二）魔化添加</title>
      <link href="/2022/04/22/hexo-butterfly%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/04/22/hexo-butterfly%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>添加到<code>_config.yml</code>最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p>在Butterfyl主题配置文件<code>_butterfly.yml</code>文件中找到如下内容修改enable:为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: 搜索文章</span><br><span class="line">    hits_empty: &quot;没找到: $&#123;query&#125; 相关内容捏&quot; # 如果没有查到内容相关内容显示</span><br></pre></td></tr></table></figure><p>效果预览</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220412120415620.png" alt="image-20220412120415620"></p><h1 id="添加首页分类卡片"><a href="#添加首页分类卡片" class="headerlink" title="添加首页分类卡片"></a>添加首页分类卡片</h1><p><a href="https://www.npmjs.com/package/hexo-butterfly-categories-card">https://www.npmjs.com/package/hexo-butterfly-categories-card</a></p><p>安装</p><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure><ol><li>添加配置信息，以下为写法示例 在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># hexo-butterfly-categories-card</span><br><span class="line"># see https://akilar.top/posts/a9131002/</span><br><span class="line">categoryBar:</span><br><span class="line">  enable: true # 开关</span><br><span class="line">  priority: 5 #过滤器优先权</span><br><span class="line">  enable_page: / # 应用页面</span><br><span class="line">  layout: # 挂载容器类型</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  column: odd # odd：3列 | even：4列</span><br><span class="line">  row: 1 #显示行数，默认两行，超过行数切换为滚动显示</span><br><span class="line">  message:</span><br><span class="line">    - descr: Ubuntu指南</span><br><span class="line">      cover: https://npm.elemecdn.com/akilar-candyassets/image/cover1.webp</span><br><span class="line">    - descr: 玩转Win10</span><br><span class="line">      cover: https://npm.elemecdn.com/akilar-candyassets/image/cover2.webp</span><br><span class="line">    - descr: 长篇小说连载</span><br><span class="line">      cover: https://npm.elemecdn.com/akilar-candyassets/image/cover3.webp</span><br><span class="line">    - descr: 个人日记</span><br><span class="line">      cover: https://npm.elemecdn.com/akilar-candyassets/image/cover4.webp</span><br><span class="line">    - descr: 诗词歌赋</span><br><span class="line">      cover: https://npm.elemecdn.com/akilar-candyassets/image/cover5.webp</span><br><span class="line">    - descr: 杂谈教程</span><br><span class="line">      cover: https://npm.elemecdn.com/akilar-candyassets/image/cover6.webp</span><br><span class="line">  custom_css: https://npm.elemecdn.com/hexo-butterfly-categories-card/lib/categorybar.css</span><br></pre></td></tr></table></figure><ol><li>参数释义</li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable</td><td>true/false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path/all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为’/‘</td></tr><tr><td>layout.type</td><td>id/class</td><td>【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>column</td><td>odd/even</td><td>【可选】显示列数，考虑到比例问题，只提供3列和4列，odd为3列， even为4列</td></tr><tr><td>row</td><td>number</td><td>【可选】显示行数，默认两行，超过行数切换为滚动显示</td></tr><tr><td>message.descr</td><td>text</td><td>分类描述,需要和你自己的文章分类一一对应。</td></tr><tr><td>message.cover</td><td>url</td><td>分类背景,需要和你自己的文章分类一一对应。</td></tr><tr><td>custom_css</td><td>url</td><td>【可选】自定义样式，会替换默认的css链接，可以下载文档给出的cdn链接后自主修改</td></tr></tbody></table></div><h1 id="顶部图修改"><a href="#顶部图修改" class="headerlink" title="顶部图修改"></a>顶部图修改</h1><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220422084033831.png" alt="image-20220422084033831"></p><h2 id="设置图片"><a href="#设置图片" class="headerlink" title="设置图片"></a>设置图片</h2><p>修改主题的配置文件 <code>_config.butterfly.yml</code>。编辑 <code>index_img</code>、<code>background</code>、<code>footer_bg</code> 选项。设置网站背景，并将主页顶部图和页脚背景改为透明。(需要将以下示例地址替换为自己的图片地址。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line"># Image (圖片設置)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># The banner image of home page</span><br><span class="line">index_img: transparent</span><br><span class="line"></span><br><span class="line"># Beautify/Effect (美化/效果)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Website Background (設置網站背景)</span><br><span class="line"># can set it to color or image (可設置圖片 或者 顔色)</span><br><span class="line"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line">background: url(https://example.com/img/background.jpg)</span><br><span class="line"></span><br><span class="line"># Footer Background</span><br><span class="line">footer_bg: transparent</span><br></pre></td></tr></table></figure><p>此处可以将标签页和分类页等自己设置的顶部图删去，否则就会出现如下情况。并且文章页面是默认将封面图置于上方。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220422084253647.png" alt="image-20220422084253647"></p><h2 id="引入相关样式"><a href="#引入相关样式" class="headerlink" title="引入相关样式"></a>引入相关样式</h2><p>新建一个文件，位于 <code>source/css/modify.styl</code>，并增加以下内容。<br>(此处只是举例，也可以使用自己已有的样式文件。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">STYL</span><br><span class="line">@import &#x27;nib&#x27;</span><br><span class="line"></span><br><span class="line">// 顶部图</span><br><span class="line">#page-header</span><br><span class="line">  &amp;, &amp;:before</span><br><span class="line">    background: transparent !important</span><br><span class="line">  &amp;.post-bg, &amp;.not-home-page</span><br><span class="line">    height: 280px !important</span><br><span class="line">  #post-info</span><br><span class="line">    bottom: 40px !important</span><br><span class="line">  #page-site-info</span><br><span class="line">    top: 140px !important</span><br><span class="line"></span><br><span class="line">  @media screen and (max-width: 768px)</span><br><span class="line">    &amp;.not-home-page</span><br><span class="line">      height: 200px !important</span><br><span class="line">    #post-info</span><br><span class="line">      bottom: 10px !important</span><br><span class="line">    #page-site-info</span><br><span class="line">      top: 100px !important</span><br><span class="line"></span><br><span class="line">.top-img</span><br><span class="line">  height: 250px</span><br><span class="line">  margin: -50px -40px 50px</span><br><span class="line">  border-top-left-radius: inherit</span><br><span class="line">  border-top-right-radius: inherit</span><br><span class="line">  background-position: center center</span><br><span class="line">  background-size: cover</span><br><span class="line">  transition: all 0.3s</span><br><span class="line"></span><br><span class="line">  @media screen and (max-width: 768px)</span><br><span class="line">    height: 230px</span><br><span class="line">    margin: -36px -14px 36px</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    filter: brightness(0.8)</span><br><span class="line"></span><br><span class="line">// 页脚</span><br><span class="line">#footer:before</span><br><span class="line">  background-color: alpha(#FFF, .5)</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    background-color: alpha(#000, .5)</span><br><span class="line"></span><br><span class="line">#footer-wrap, #footer-wrap a</span><br><span class="line">  color: #111</span><br><span class="line">  transition: unset</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    color: var(--light-grey)</span><br></pre></td></tr></table></figure><p>在主题配置文件 <code>_config.butterfly.yml</code> 的 <code>inject.head</code> 引入样式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line"># other (其他)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/modify.css&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>modify.styl</code> 会被 Hexo 渲染成 <code>modify.css</code> 文件，所以此处应为 <code>modify.css</code>。</p><h2 id="增加插件脚本"><a href="#增加插件脚本" class="headerlink" title="增加插件脚本"></a>增加插件脚本</h2><p>因为使用了 <code>cheerio</code> 来解析 HTML，所以需要先安装此依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD</span><br><span class="line">npm install cheerio</span><br></pre></td></tr></table></figure><p>新建一个文件，位于 <code>scripts/modify.js</code>，并增加以下内容。<br>(此处只是举例，也可以使用自己已有的插件脚本文件。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">JS</span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">const cheerio = require(&#x27;cheerio&#x27;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在页面插入新顶部图</span><br><span class="line"> * @param &#123;cheerio.Root&#125; $ Root</span><br><span class="line"> */</span><br><span class="line">function insertTopImg($) &#123;</span><br><span class="line">    let header = $(&#x27;#page-header&#x27;);</span><br><span class="line">    if (header.length === 0) return;</span><br><span class="line">    let background = header.css(&#x27;background-image&#x27;);</span><br><span class="line">    if (!background) return;</span><br><span class="line">    $(&#x27;#post, #page, #archive, #tag, #category&#x27;).prepend(`&lt;div class=&quot;top-img&quot; style=&quot;background-image: $&#123;background&#125;;&quot;&gt;&lt;/div&gt;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(&#x27;after_render:html&#x27;, function(str, data) &#123;</span><br><span class="line">    let $ = cheerio.load(str, &#123;</span><br><span class="line">        decodeEntities: false</span><br><span class="line">    &#125;);</span><br><span class="line">    insertTopImg($);</span><br><span class="line">    return $.html();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://android99.me/2021/08/10/butterfly-top-image-modify/">矩阵 Butterfly主题 一图流背景与顶部图修改</a></p><h1 id="首页轮播图"><a href="#首页轮播图" class="headerlink" title="首页轮播图"></a>首页轮播图</h1><p>我选择了分类卡片，觉得轮播图用不上，如果你需要，可以参照</p><p><a href="https://www.npmjs.com/package/hexo-butterfly-swiper">https://www.npmjs.com/package/hexo-butterfly-swiper</a></p><h1 id="如何取消文章目录的自动编号"><a href="#如何取消文章目录的自动编号" class="headerlink" title="如何取消文章目录的自动编号"></a>如何取消文章目录的自动编号</h1><blockquote><p>有时我们文章的展开目录不需要自动编号，而是希望和<code>*.md</code>保持一致<br>但是<code>Hexo</code>默认会加上编号，这会导致①在有编号的地方重复编号；②在不需要编号（譬如某些三级目录）的地方也会编号<br>所以需要修改源码：<code>./node_modules/hexo/lib/plugins/helper/toc.js</code></p></blockquote><p>第一步：<code>vi ./node_modules/hexo/lib/plugins/helper/toc.js</code><br>第二步：修改其中<code>list_number: true</code>的属性值，默认<code>true</code>为使用自动编号，如下第六行</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>轻小说页面，大体上基于友链页面的源码，稍微修改一下卡片大小，再去掉外面的伪类；接下来创建一个新的类型；最后把这篇文章的类型设置为刚才创建的那个类型即可。我是一边改一边调试才做好的，所以泛用性不强，没报错&amp;能用就行。<br>创建一个新的文章类型的步骤大概是下面这样的：</p><p><img src="https://cloud.fullcomb.top/private/source/image/issue/2.png" alt="img"></p><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><p>cusdis</p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly（一）主题安装</title>
      <link href="/2022/04/22/hexo-butterfly%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/04/22/hexo-butterfly%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客根目录一律以<code>[Blogroot]</code>指代</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>影评|《琅琊榜》——愿你出走半生，归来仍是少年。</title>
      <link href="/2022/04/21/%E5%BD%B1%E8%AF%84-%E3%80%8A%E7%90%85%E7%90%8A%E6%A6%9C%E3%80%8B/"/>
      <url>/2022/04/21/%E5%BD%B1%E8%AF%84-%E3%80%8A%E7%90%85%E7%90%8A%E6%A6%9C%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>​        “愿你出走半生，归来仍是少年”，以前觉得这句话很俗，已经烂大街了，可看完琅琊榜，心里一直在重复这句话，对林殊，对梅长苏，对胡歌，</p><p>​                      愿你出走半生，归来仍是少年。</p>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具|latex使用笔记</title>
      <link href="/2022/04/18/%E5%B7%A5%E5%85%B7-latex%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/18/%E5%B7%A5%E5%85%B7-latex%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><strong>一 初识</strong></h1><p>所有的LaTex文档必须要有一个**\documentclass[…]{…}**指令，用于确定文档的类型。比如：</p><ul><li>\documentclass{article}：短文章</li><li>\documentclass{report}：长文章，比如论文</li><li>\documentclass{book}：书籍</li></ul><p>这些文档的类型是<strong>必填项</strong>，填在大括号{}中。</p><p>方括号[]中是选填项，我们可以这么填：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[12pt,a4paper]&#123;article&#125;</span><br></pre></td></tr></table></figure><p>“12pt”指文章的字体大小为12号；“a4paper”指页面为A4纸大小。</p><p>在确定了文档类型后，我们就可以输入**\begin{document}**，该指令之后的内容就是你要呈现给读者的内容，即PDF上会显示的内容。</p><p>需要注意的是，LaTex中所有的**\begin{…}<strong>指令都必须对应一个</strong>\end{…}<strong>指令。所以，我们需要用一个</strong>\end{document}**指令来结束自己的文章。</p><p>在**\end{document}**之后的文字，LaTex是不会理睬的。</p><h2 id="拓展包"><strong>拓展包</strong></h2><p>LaTex拥有功能各异的拓展包。使用这些拓展包能大幅提高LaTex的功能。我们可以通过**\usepackage{…}**指令来调用某个拓展包。</p><p>需要注意的是，**\usepackage{…}<strong>指令必须写在「导言」部分，也就是</strong>\documentclass{…}**和 <strong>\begin{document}</strong> 之间。</p><p>正确的做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;  </span><br><span class="line"></span><br><span class="line">\usepackage&#123;...&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;  </span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h3 id="实现中英文混排"><strong>实现中英文混排</strong></h3><p>在 TeXworks 编辑框中输入以下内容，<strong>以 UTF-8 编码保存，使用 XeLaTeX 编译</strong>：</p><p>EC-mix.tex</p><table><thead><tr><th>1234</th><th>\documentclass[UTF8]{ctexart}\begin{document}你好，world!\end{document}</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="注释"><strong>注释</strong></h2><p>TeX 以百分号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%</span><br></pre></td></tr></table></figure><p>作为注释标记。具体来说，TeX 会忽略从</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%</span><br></pre></td></tr></table></figure><p>开始到当前行末尾的所有内容。这些内容不会被输出，也不影响最终排版效果，只供人类阅读。若要输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%</span><br></pre></td></tr></table></figure><p>字符本身，则需要在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%</span><br></pre></td></tr></table></figure><p>之前加上反斜杠</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\</span><br></pre></td></tr></table></figure><p>进行转义（escape）。例如：</p><table><thead><tr><th>1</th><th>今年的净利润为 20%，比去年高。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>此处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%</span><br></pre></td></tr></table></figure><p>被当做正常的百分号处理，其后的文字也将被正常输出。</p><h1><strong>二 正文格式</strong></h1><h3 id="作者、标题、日期"><strong>作者、标题、日期</strong></h3><p>保存并用 XeLaTeX 编译如下文档，查看效果：</p><table><thead><tr><th>12345678</th><th>\documentclass[UTF8]{ctexart}\title{你好，world!}\author{Liam}\date{\today}\begin{document}\maketitle你好，world!\end{document}</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>导言区复杂了很多，但和之前的文档主要的区别只有一处：定义了标题、作者、日期。</p><p>在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document</span><br></pre></td></tr></table></figure><p>环境中，除了原本的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，world!</span><br></pre></td></tr></table></figure><p>，还多了一个控制序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maketitle</span><br></pre></td></tr></table></figure><p>。这个控制序列能将在导言区中定义的标题、作者、日期按照预定的格式展现出来。</p><p>「正文」部分用于调整文字格式的几个指令：</p><ul><li>\section{…}：将大括号{}中的文字变为一级标题</li><li>\subsection{…}：二级标题</li><li>\textit{…}：斜体</li><li>\textbf{…}：粗体</li><li>\textsuperscript{…}：上标</li><li>\textsubscript{…}：下标</li><li>\textsc{…}：小型大写字母</li></ul><h3 id="章节和段落"><strong>章节和段落</strong></h3><p>在文档类 article和ctexart中，定义了五个控制序列来调整行文组织结构。他们分别是</p><ul><li></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\section&#123;·&#125;</span><br></pre></td></tr></table></figure><ul><li></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\subsection&#123;·&#125;</span><br></pre></td></tr></table></figure><ul><li></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\subsubsection&#123;·&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\paragraph&#123;·&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\subparagraph&#123;·&#125;</span><br></pre></td></tr></table></figure><h3 id="目录"><strong>目录</strong></h3><p>\tableofcontents</p><h1><strong>三 常见用法</strong></h1><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>公式内容</mtext></mrow><annotation encoding="application/x-tex">{公式内容}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord cjk_fallback">公式内容</span></span></span></span></span>表示行内公式，$${公式内容}$$表示该公式独占一行。</li><li>_表示下标，^上标，{ }表示一个整体</li><li>\frac {分子}{分母}表示分式，\sqrt{表达式}表示开平方，\sqrt[n]{表达式}表示开n次方。</li><li>普通字符在数学公式中含义一样，除了# $ % &amp; ~ <em>^ \ { }。若要在数学环境中表示这些符号# $ % &amp;</em> { }，需要分别表示为# $ % &amp; _ { }，即在个字符前加上\。</li><li>\boldsymol {表达式}表示字体加粗，\rm表示直立字体，\it表示斜体。</li><li>\limits命令可强制使上下标位于符号的正上方和正下方。</li><li>当要显示大号的括号或分隔符时，要对应用 \left 和 \right修饰大括号或分隔符，当括号或分隔符不成对时，要用\left. \right.进行匹配。这两个符号仅用于匹配，并不显示。</li><li>\int表示积分符号,\iint表示二重积分,\iiint表示三重积分,oint表示环路积分.</li><li>\infty表示无穷.</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数学建模|聚类模型</title>
      <link href="/2022/04/17/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/04/17/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“物以类聚，人以群分”，所谓的聚类，就是将样本划分为<br>由类似的对象组成的多个类的过程。聚类后，我们可以更加<br>准确的在每个类中单独使用统计模型进行估计、分析或预测；<br>也可以探究不同类之间的相关性和主要差异。<br>聚类和分类的区别：分类是已知类别的，聚类未知</p></blockquote><h1>聚类</h1><p>通常根据分类对象的不同，可以将聚类分为两类：一类是对样品进行分类处理，叫Q型；一类是对变量进行分类处理，叫R型。Q型聚类又叫样品分类，就是对观测对象进行聚类，是根据被观测的对象各种特征进行分类。</p><p>当选用n个样本，p个指标时，就可以得到一个$$n×pn×p$$的数据矩阵，即$$X=(xij)n×pX=(xij)n×p$$，该距离的元素$$xijxij$$表示第i个样本的第j个变量值。</p><h2 id="距离">距离</h2><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418171841012.png" alt="image-20220418171841012"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418171903749.png" alt="image-20220418171903749"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418171922219.png" alt="image-20220418171922219"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418171935944.png" alt="image-20220418171935944"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418171954745.png" alt="image-20220418171954745"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418172013750.png" alt="image-20220418172013750"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418172028572.png" alt="image-20220418172028572"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418172048880.png" alt="image-20220418172048880"></p><h3 id="image-20220418172101626"><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418172101626.png" alt="image-20220418172101626"></h3><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418172124027.png" alt="image-20220418172124027"></p><h1>一、K-means聚类算法</h1><h3 id="1-流程">1. 流程</h3><ol><li>指定需要划分的簇的个数K值（类的个数）;</li><li>随机地选择K个数据对象作为初始的聚类中心（不一定要是我们的样本点）;</li><li><strong>计算其余的各个数据对象到这K个初始聚类中心的距离</strong>，把数据对象划归到距离它最近的那个中心所处在的簇类中;</li><li>调整新类并且重新计算出新类的中心;</li><li>循环步骤三和四，看中心是否收敛（不变），如果收敛或达到迭代次数则停止循环;</li><li>结束。</li></ol><hr><h3 id="2-图解-K-means">2. 图解 K-means</h3><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418152435621.png" alt="image-20220418152435621"></p><p>K均值聚类可视化网站：<a href="https://www.naftaliharris.com/blog/visualizing-k-means-clustering/">https://www.naftaliharris.com/blog/visualizing-k-means-clustering/</a></p><p><strong>算法流程图</strong></p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418161837539.png" alt="image-20220418161837539" style="zoom:80%;" /><h3 id="3-算法评价">3. 算法评价</h3><p>优点：</p><p>（1）算法简单、快速。</p><p>（2）对处理大数据集，该算法是相对高效率的。</p><p>缺点：</p><p>（1）要求用户必须事先给出要生成的簇的数目k</p><p>（2）对初值敏感</p><p>（3）对于孤立点数据敏感</p><p>==K‐means++算法可 解决2、3这两个缺点==</p><h2 id="K-means-算法">K-means++算法</h2><p>与K‐means++算法的区别</p><p>k-means++算法选择初始聚类中心的基本原则是： <strong>初始的聚类中心之间的相互距离要尽可能的远。</strong></p><p>算法描述如下：（<strong>只对K-means算法“初始化K个聚类中心” 这一步进行了优化</strong>）</p><ul><li>步骤一： 随机选取一个样本作为第一个聚类中心；</li><li>步骤二： 计算每个样本与当前已有聚类中心的最短距离（即与最近一个聚类中心的距离），这个值越大，表示被选取作为聚类中心的概率较大；最后，用轮盘法（依据概率大小来进行抽选）选出下一个聚类中心；</li><li>步骤三： 重复步骤二，直到选出K个聚类中心。选出初始点后，就继续使用标准的K-means算法了。</li></ul><p>SPSS软件操作</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418162727484.png" alt="image-20220418162727484"></p><h3 id="K-means算法的一些讨论">K-means算法的一些讨论</h3><ol><li><p>聚类的个数K值怎么定？<br>答：分几类主要取决于个人的经验与感觉，通常的做法是多尝试几个K值，看分成几类的结果更好解释(<strong>高消费与低消费，或者高消费、中消费与低消费</strong>），更符合分析目的等。</p></li><li><p>数据的量纲不一致怎么办？<br>答：如果数据的量纲不一样，那么算距离时就没有意义。例如：如果X1单位是米， X2单位是吨，用距离公式计算就会出现“米的平方”加上“吨的平方”再开平方，最后算出的东西没有数学意义，这就有问题了。</p><p>具体做法：先减去均值再除以标准差</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418162845915.png" alt="image-20220418162845915"></p><h1>二、系统（层次）聚类</h1><p>系统聚类的合并算法通过计算两类数据点间的距离，对最为接近的两类数据点进行组合，并反复迭代这一过程，直到将所有数据点合成一类，并生成聚类谱系图。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418163621273.png" alt="image-20220418163621273"></p><h3 id="算法流程">算法流程</h3><p>系统（层次）聚类的算法流程：</p><ul><li>一、将每个对象看作一类，计算两两之间的最小距离；</li><li>二、将距离最小的两个类合并成一个新类；</li><li>三、重新计算新类与所有类之间的距离；</li><li>四、重复二三两步，直到所有类最后合并成一类；</li><li>五、结束。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418172246067.png" alt="image-20220418172246067"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220418172403267.png" alt="image-20220418172403267"></p><h1>三、DBSCAN算法</h1><p>DBSCAN(Density-based spatial clustering of applications with noise)是Martin Ester, Hans-PeterKriegel等人于1996年提出的一种<strong>基于密度</strong>的聚类方法，聚类前不需要预先指定聚类的个数，生成的簇的个数不定（和数据有关）。该算法利用基于密度的聚类的概念，即要求聚类空间中的一定区域内所包含对象（点或其他空间对象）的数目不小于某一给定阈值。该方法能在具有噪声的空间数据库中发现任意形状的簇，可将密度足够大的相邻区域连接，能有效处理异常数据。</p><h3 id="基本概念">基本概念</h3><p>DBSCAN算法将数据点分为三类：<br>• 核心点：在半径Eps内含有不少于MinPts数目的点<br>• 边界点：在半径Eps内点的数量小于MinPts，但是落在核心点的邻域内<br>• 噪音点：既不是核心点也不是边界点的点</p><h3 id="优缺点">优缺点</h3><p>优点：</p><ol><li>基于密度定义，能处理任意形状和大小的簇；</li><li>可在聚类的同时发现异常点；</li><li>与K-means比较起来，不需要输入要划分的聚类个数。</li></ol><p>缺点：</p><ol><li>对输入参数ε和Minpts敏感，确定参数困难；</li><li>由于DBSCAN算法中，变量ε和Minpts是全局唯一的,当聚类的密度不均匀时，聚类距离相差很大时，聚类质量差；</li><li>当数据量大时，计算密度单元的计算复杂度大。</li></ol><p>我的建议：</p><ol><li>只有两个指标，且你做出散点图后发现数据表现得很“DBSCAN”，这时候你再用DNSCAN进行聚类。其他情况下，全部使用系统聚类吧。</li><li>K‐means也可以用，不过用了的话你论文上可写的东西比较少。</li></ol><h2 id="作业">作业</h2><p>完成一篇论文作业，“各国森林、草原资源聚类.doc”，提示：指标共三个，量纲不同哦，论文中要交代清楚K的选择，当然你也可以画出你的聚类结果的三维图。</p><ol><li>把作业表格复制到excel，用spss软件直接打开即可。</li><li>归一化变量</li></ol><p>1）代码题(选做) ：请结合DBSCAN的伪代码给Matlab官网推荐下载的代码<br>添加上注释。（代码要是怕被查重，最容易的方法就是加上自己的注释，当<br>然也可以修改变量名）<br>注意：里面可能有部分函数你之前没有见过，例如pdist2和false这两个函数，<br>请自己查阅相关资料，并带上一些小例子在注释中，以防日后忘记。<br>（2）用亿图、 PPT或者Visio等软件中的一种画出系统聚类的流程图，画出来<br>的图以后国赛就可以直接用了，而且它的版权属于你自己，查重你也不用怕。<br>（3）完成一篇论文作业，“各国森林、草原资源聚类.doc”，提示：指标共三<br>个，量纲不同哦，论文中要交代清楚K的选择，当然你也可以画出你的聚类结<br>果的三维图。<br>（4）选做：体验下DBSCAN代码，我会给你一个新的数据集合，你可以试试<br>对于这个数据集，选择多大的Eps和MinPts会使得聚类的效</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随笔|生活很难，事情好多</title>
      <link href="/2022/04/14/%E9%9A%8F%E7%AC%94-%E7%94%9F%E6%B4%BB%E5%BE%88%E9%9A%BE%EF%BC%8C%E4%BA%8B%E6%83%85%E5%A5%BD%E5%A4%9A/"/>
      <url>/2022/04/14/%E9%9A%8F%E7%AC%94-%E7%94%9F%E6%B4%BB%E5%BE%88%E9%9A%BE%EF%BC%8C%E4%BA%8B%E6%83%85%E5%A5%BD%E5%A4%9A/</url>
      
        <content type="html"><![CDATA[<p>我想要写点什么。</p><p>下午是遥感概论课，因为上节课翘课了，所以到教室才知道今天实习不上课，现在找了一个教室自己坐着。</p><p>越是事情堆在一起，我越找不到方向去做，这就是现在的我，上周老师改的综述论文现在还没开始动手，c++实习、地图学实习、操作系统作业，最重要的是地图投影作业，这些压的我喘不过气。昨晚找到了一个考研的网友，好久之前决定开始的专业课学习到现在进度还是停滞在第一章，还有让我措不及防的数模竞赛今天已然开始。</p><p>既然已经决定跨考，那现在的专业课还要不要认真对待？还是得过且过就行，最后拿个毕业证，我不知道这个问题的具体答案，我不想让课内成绩变得很槽糕，这不是我，但现在的我确实没有办法处理好这一切，归根结底还是我的懒惰、拖延吧。</p><p>我能做好所有的事情，这一直是我对自己莫名的自信，我想把它变成现实，我可以。</p><p>唠唠叨叨也不知道写了啥，但是总结起来就是只要是自己的任务，那就尽力做好，一件一件事情去做，总可以做完，要坚持写数学，因为这才是前方的光。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插值与拟合</title>
      <link href="/2022/04/12/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88/"/>
      <url>/2022/04/12/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>辩论|林正疆学长《政策辩论》讲座笔记</title>
      <link href="/2022/04/05/%E8%BE%A9%E8%AE%BA-%E6%9E%97%E6%AD%A3%E7%96%86%E5%AD%A6%E9%95%BF%E3%80%8A%E6%94%BF%E7%AD%96%E8%BE%A9%E8%AE%BA%E3%80%8B%E8%AE%B2%E5%BA%A7%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/05/%E8%BE%A9%E8%AE%BA-%E6%9E%97%E6%AD%A3%E7%96%86%E5%AD%A6%E9%95%BF%E3%80%8A%E6%94%BF%E7%AD%96%E8%BE%A9%E8%AE%BA%E3%80%8B%E8%AE%B2%E5%BA%A7%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>政策与我们每个人息息相关，最早政策辩比赛采用奥瑞刚制度，改良自法庭辩论，两者很接近。检察官有举证责任去判定被告有罪（相对于被告去证明自己无罪，即使在被告说假话的情况下），无罪推定，任何人在判决前都被推定无罪；正方相当于检察官。</p></blockquote><h1>政策辩论的基本原理</h1><p>一、政策辩论的意义</p><p>1.政策辩论是以“政策推行与否”作为主题而进行的辩论活动</p><p>2.政策辩论具有高度厘清社会议题、建议施政方针的功能</p><p>3.政策辩论高度要求数据和举证技术</p><blockquote><p>正方是政府国家的角色，反方质疑政府不会去做 的情况下是无效的</p></blockquote><blockquote><p>很多人会问辩论打完这个政策就会推行吗？不过就是一群人嘴炮，可是在一个政策被广泛的讨论之后，通常以后会在社会中有所印证。</p></blockquote><blockquote><p>正方具有责任去说清楚怎么去实行这个政策</p></blockquote><p>4.所谓“政策”，不限于行政作为，但正方必定是以政策的制定者或推动者自居（通常就是政府），反方则未必如此</p><p>5.政策辩论核心精神在于“达成政策效用”以及“举证以实其说”</p><p>6.政策辩论中，在最大可能范围内，必须将一切得失“数据化”</p><p>二、政策辩论的特色</p><p>1.政策辩论的题目，晚关上必定是“具有可推行”——伴随“制度”的政策</p><p>2.并非所有具备“应然性”题目的外观都是政策辩论</p><p>3.并非任何提到“政策”这个名词的题目，都是政策辩论</p><blockquote><p>只要任何一个辩题的正方必然伴随制度，就是政策辩。“刑责年龄”下降，正方需要提出相应政策，降低到多少岁需要提出。</p><p>“人口宽松和人口紧缩”过于抽象，很多时候可能海关一个态度之类的就可以完成，不属于政策辩</p></blockquote><p>三、政策辩论的基本原则</p><p>1.应然面与实然面之争？【必然涉及实然政策如何实施】</p><p>2.立即马上实行or逐步实行？【台湾“高校自己独立招生”，现在问题多不可实行，正方提出只是这个方向正确，50年左右是一个合理时间。政策应该包括立即马上，那就50年后来讨论要不要实行，（类比法庭辩论捅了一刀，50年后他终究会死，很可笑）；“延后退休年龄”，正方提出应该逐步实行，61岁到62岁后面第5年到65岁，从此之后都是65岁，这样是可以的，第一年就是在延后，只不过是循序渐进】</p><p>3.部分区域施行or全面施行？【“设置弃婴岛”，该不该广泛设定，正方决定先从海南岛开始，原则上是不行，除非特定的题目，比如“废除死刑”，正方不能说是河北省与河南省，“赌博特区”之类的题目是可以，题目语境同意将政策推行在特定区域，否则正方不可以提出在特定区域内推行】</p><p>4.题目欠缺主题时，应如何理解？</p><p>5.民意调查VS强制认可权【不能拿民意调查去压人，（检察官不能用这个去判罪），双方具有强制认可权，谁说的有理，民众就会认可，否则出现有人调查所有人，97%都认同。“该不该废除死刑”，92.7%民众希望不会废除，刑法的修复功能，满足人民的法感，——&gt;导致私刑泛滥，不是拿民意调查证明立场，而是证明某一件事情的存在，进而导向立场。（案件发生后，受访者表示再也不相信台湾的正义，如何期待社会秩序的维持。】</p><p>6.政策辩论的正方与反方</p><p>A.无论单题制或双题制，政策辩论的正方必定违反现状</p><p>B.单题制的反方可以选择：维持现状（享有推定利益）、不涉及新制度之提出而单纯修正现状（据情况享有推定利益）、涉及新制度提出而推行相抗计划（不享有推定利益），三种立场</p><h1>政策辩论的思考判断体系</h1><p>一、需要性（目的性、提出问题）</p><p>1.现状之下发生了某个问题（问题意识的存在）</p><p>2.问题本身必须具有解决的必要性</p><p>3.问题本质上可以是现状的缺失、损害，也可以只是“现状不够好”</p><blockquote><p>需要性可以建立在现状没问题但改了可以更好的情况下，延后退休年龄获得经济收益</p></blockquote><p>4.针对正方提出的需要性，反方可以在“承认需要性”的前提之下展开讨论（此时主要讨论焦点将出现在后面提到的根属性、解决力、损益比三部分），也可以“根本单纯否定正方的需要性”，或是“一方面否定正方的需要性，另一方面指出其他的需要性”</p><p>二、根属性</p><p>1.现状之下，之所以发生前述问题，是因为这个辩题的正方没有被实行</p><p>因果关系的连结？</p><p>政府作为的不可取代性？</p><p>2.根属性是实战交锋中最容易被忽略的角色</p><p>3.A=B的观念模块下，根属性的攻防基本上只有两种：A≠B or 非A（才会也会）=B</p><p>4.反方承认正方的根属性，必然也同时承认正方的需要性</p><p>5.若反方承认正方的根属性，则讨论将聚焦于解决力（可行性）与损益比</p><p>6.根属性=法庭辩论中“否认被告人有此行为”或“因果关系”的抗辩</p><p>此与“否认有次正义需要实现”或“否认有此行为需要被审批”的需要性抗辩不相同</p><p>三、解决力（制度面的可行性）</p><p>1.正方必违反现状，因此正方必须提出制度并论证其解决力（制度面的可行性）。主义，在政策性辩论中，任何企图逃避解决力的行为，结束谬误</p><p>2.任何制度如果欠缺解决力（可行性），则伴随此制度的政策将毫无价值</p><p>3.反方若为变动现状，则反方享有推定利益，可以单纯地站在批判者的角度去评判正方制度的解决力（可行性）</p><p>4.反方若修正现状（或提出相抗计划），则在修正现状（或相抗计划）范围内，反方不再享有推定利益，必须就修正的部分论证其解决力（可行性)</p><p>5.以法庭辩论为例，解决力的争执似乎“针对已经确定是行为人从事的行为，有误必要对之甲乙论罪判刑”的争执</p><p>四、损益比</p><p>1.损=成本、弊端或损失，益=需要性被满足的具体化程度</p><p>2.除了极少数普世且毫无争议的价值外，任何政策都必须经过损益比的考验</p><p>3.具体化的数字&gt;推论式的论证&gt;诉诸经验的解释&gt;断言式的结论</p><p>4.损益比攻防的要诀之一，在于如何用具体化说明（或形容）己方优势，并淡化成本与弊端</p><p>5.最大且最妥当的利益，就是最大的正义，因此绝大多数人热血沸腾的观念（例如：正义），不能成为损益比的攻防依据</p><h1>现行辩论制度下政策辩论的困境</h1><p>一、现行辩论制度难以贯彻政策的检证要求</p><p>二、利大于弊、弊大于利，此类题目大量混淆政策辩论的思考体系与评判体系【天然排除需要和根属性】</p><p>三、受限于客观条件不充分，主板单位往往回避政策辩论的基本要求</p>]]></content>
      
      
      <categories>
          
          <category> 辩论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 辩论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划应用之全局对齐</title>
      <link href="/2022/03/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BA%94%E7%94%A8%E4%B9%8B%E5%85%A8%E5%B1%80%E5%AF%B9%E9%BD%90/"/>
      <url>/2022/03/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BA%94%E7%94%A8%E4%B9%8B%E5%85%A8%E5%B1%80%E5%AF%B9%E9%BD%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统|复习习题</title>
      <link href="/2022/03/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%A4%8D%E4%B9%A0%E4%B9%A0%E9%A2%98/"/>
      <url>/2022/03/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%A4%8D%E4%B9%A0%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote></blockquote><h1>调度与死锁</h1><p>1．单项选择题</p><p>（1）在下列调度层次中，所有操作系统中都必须配置的调度层次是____。<br>A．作业调度 B．进程调度 C．交换调度 D．中级调度<br>（2）在分时操作系统中，进程调度经常采用 _____ 算法。<br>A．先来先服务 B．最高优先权<br>C．短进程优先 D．时间片轮转<br>（3）_____ 优先权是在创建进程时确定的，确定之后在整个进程运行期间不再改变。</p><p>A.   作业</p><p>（5）现有 3 个同时到达的作业 J1、J2 和 J3，它们的执行时间分别是 T1、T2 和 T3，<br>且 T1＜T2＜T3。系统按单道方式运行且采用短作业优先算法，则平均周转时间是 _____ 。</p><table><thead><tr><th>A．T1+T2+T3</th><th>B．(T1+T2+T3)/3</th><th></th><th></th></tr></thead><tbody><tr><td>C．(3T1+2T2+T3)/3 D．(T1+2T2+3T3)/3 （6）_____ 是指从作业提交给系统到作业完成的时间间隔。</td><td></td><td></td><td></td></tr><tr><td>A．运行时间</td><td>B．响应时间</td><td>C．等待时间</td><td>D．周转时间</td></tr></tbody></table><p>（7）下述作业调度算法中，________调度算法与作业的估计运行时间有关。</p><table><thead><tr><th>A．先来先服务  C．短作业优先</th><th>B．多级队列 D．时间片轮转</th></tr></thead><tbody><tr><td>（8）采用时间片轮转法进行进程调度是为了_____。</td><td></td></tr><tr><td>A．多个终端都能得到系统的及时响应</td><td>B．先来先服务</td></tr></tbody></table><table><thead><tr><th>C．优先级较高的进程得到及时响应</th><th>D．需要 CPU 最短的进程先做</th><th></th><th></th></tr></thead><tbody><tr><td>（9）假设就绪队列中有 10 个进程，系统将时间片设为 200ms， CPU 进行进程切换要</td><td></td><td></td><td></td></tr><tr><td>花费 10ms。则系统开销所占的比率约为 _____。</td><td></td><td></td><td></td></tr><tr><td>A．l％</td><td>B．5％</td><td>C．10％</td><td>D．20％</td></tr></tbody></table><p>（10）采用资源剥夺法可以解除死锁，还可以采用 _____ 方法解除死锁。</p><table><thead><tr><th>A．执行并行操作  C．拒绝分配新资源</th><th>B．撤消进程 D．修改信号量</th><th></th><th></th></tr></thead><tbody><tr><td>（11）发生死锁的必要条件有四个，要防止死锁的发生，可以通过破坏这四个必要条</td><td></td><td></td><td></td></tr><tr><td>件之一来实现，但破坏 _____ 条件是不太实际的。</td><td></td><td></td><td></td></tr><tr><td>A．互斥</td><td>B．不可抢占</td><td>C．部分分配</td><td>D．循环等待</td></tr></tbody></table><p>（12）资源的有序分配策略可以破坏 ____条件。<br>A．互斥使用资源 B．占有且等待资源<br>C．非抢夺资源 D．循环等待资源</p><p>1.链接分配的一个变种采用 FAT 来链接所有文件的块。它的优点是什么？<br>2.考虑一个磁盘的文件系统，它的逻辑块和物理块的大小都为512字节。假设每个文件的信息已在内存中。针对每种分配策略（连续、链接和索引），回答这些问题：<br>a．这个系统的逻辑到物理地址映射是如何实现的？（对于索引分配，假设每个文件总是小于512块长。)<br>b .如果当前处于逻辑块10（即最后访问的块为块10）并且需要访问逻辑块4，必须从磁盘上读时取多少物理块？<br>3.考虑一个文件系统采用 inode 来表示文件。磁盘块大小为8KB，磁盘块指针需要4字节。这个文件系统具有12个直接磁盘块，以及一级的、二级的和三级的间接磁盘块。这个文件系统存储文件的最大大小是什么？</p><p>1.文件分配表FAT是一个数据结构，用在以链接方式存储文件的系统中，记录磁盘分配和空白磁盘块。在该表中，每个磁盘块都有一个条目，并可按块号来索引，使文件被可靠快速的检索到。</p><p>2.a.连续分配：逻辑地址等于物理地址/盘块大小</p><p>链接分配：为整个磁盘或磁盘分区设置一个表，每个表项的序号与磁盘块号对应，其中保持文件下一个数据块（逻辑地址）所在的磁盘号。</p><p>索引分配：文件前十条逻辑地址依次保持在直接索引快的盘块号上，接下来的一级索引，二级索引，三级索引依次可保持1024，1024 * 1024，1024<em>1024</em>1024条逻辑地址。</p><p>b.1 4 2</p><p>3.$$8kb / 4b = 2048$$</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>8</mn><mo>∗</mo><mn>12</mn><mo>+</mo><mn>8</mn><mo>∗</mo><mn>2048</mn><mo>+</mo><mn>8</mn><mo>∗</mo><mn>2048</mn><mo>∗</mo><mn>2048</mn><mo>+</mo><mn>8</mn><mo>∗</mo><mn>2048</mn><mo>∗</mo><mn>2048</mn><mo>∗</mo><mn>2048</mn><mo>=</mo><mn>68</mn><mo separator="true">,</mo><mn>753</mn><mo separator="true">,</mo><mn>047</mn><mo separator="true">,</mo><mn>648</mn><mi>k</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">8 * 12 + 8 * 2048 + 8 * 2048 * 2048 + 8 * 2048 * 2048 * 2048 = 68,753,047,648 kb</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2048</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2048</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2048</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2048</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2048</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2048</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">68</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">753</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">047</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">648</span><span class="mord mathnormal">kb</span></span></span></span></span></p><p><strong>第3章 处理机调度与死锁习题</strong></p><p>三、名词解释</p><p><strong>高级调度:</strong> 又称作业调度，用于决定把外存上处于后备队列中的哪些作业调入内存，并为之创建进程，排在就绪对列上。</p><p><strong>低级调度:</strong> 又称进程调度，用于选择就绪队列上哪个进程可以获得处理机执行。</p><p><strong>中级调度:</strong> 又称对换调度，用于将那些暂时不能运行的进程由内存调至外存，排在挂起对列</p><p>中，待这些进程重又具备运行条件，且内存又有空闲，将其重新由外存调入内存，排在就绪</p><p>队列中。</p><p><strong>死锁</strong>**:** 指在多道程序系统中，多个进程在运行过程中因争夺资源造成的一种僵局。</p><p><strong>死锁避免:</strong> 不需事先采用各种限制措施去破坏产生死锁的必要条件，而是在资源的动态分配过程中，用某种方式去防止系统进入不安全状态，从而避免发生死锁。</p><p><strong>进程同步:</strong> 程间共同完成一项任务时直接发生相互作用的关系，也就是说，这些具有伙伴关系的进程在执行时间次序上必须遵循确定的规律。</p><p><strong>进程互斥:</strong> 逻辑上本来完全独立的若干进程，由于竞争同一个资源而产生的相互制约关系。</p><p>四、问答题</p><p><strong>1</strong>**、设在单道批处理系统中有四道作业，它们提交的时刻及运行时间如下：**</p><table><thead><tr><th><strong>作业号</strong></th><th><strong>提交时刻（<strong><strong>h</strong></strong>）</strong></th><th><strong>运行时间（<strong><strong>h</strong></strong>）</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>8.0</strong></td><td><strong>1.0</strong></td></tr><tr><td><strong>2</strong></td><td><strong>8.5</strong></td><td><strong>0.5</strong></td></tr><tr><td><strong>3</strong></td><td><strong>9.0</strong></td><td><strong>0.2</strong></td></tr><tr><td><strong>4</strong></td><td><strong>9.1</strong></td><td><strong>0.1</strong></td></tr></tbody></table><p><strong>请分别给出在算法FCFS</strong>**、SJF<strong><strong>和HRN</strong></strong>中这组作业的调度顺序、平周转时间和平均带权周转时间。**</p><p>**【**<strong>解答】</strong></p><p>FCFS算法调度顺序：1，2，3，4，作业运行情况如下表</p><table><thead><tr><th>作业号</th><th>开始时间</th><th>完成时间</th><th>周转时间</th><th>带权周转时间</th></tr></thead><tbody><tr><td>1</td><td>8.0</td><td>9.0</td><td>1.0</td><td>1.0</td></tr><tr><td>2</td><td>9.0</td><td>9.5</td><td>1.0</td><td>2.0</td></tr><tr><td>3</td><td>9.5</td><td>9.7</td><td>0.7</td><td>3.5</td></tr><tr><td>4</td><td>9.7</td><td>9.8</td><td>0.7</td><td>7.0</td></tr></tbody></table><p>平均周转时间T=(1.0+1.0+0.7+0.7)/4=0.85</p><p>平均带权周转时间W=(1.0+2.0+3.5+7.0)/4=3.375</p><p>SJF算法调度顺序：1，3，4，2，作业运行情况如下表</p><table><thead><tr><th>作业号</th><th>开始时间</th><th>完成时间</th><th>周转时间</th><th>带权周转时间</th></tr></thead><tbody><tr><td>1</td><td>8.0</td><td>9.0</td><td>1.0</td><td>1.0</td></tr><tr><td>2</td><td>9.3</td><td>9.8</td><td>1.3</td><td>2.6</td></tr><tr><td>3</td><td>9.0</td><td>9.2</td><td>0.2</td><td>1.0</td></tr><tr><td>4</td><td>9.2</td><td>9.3</td><td>0.2</td><td>2.0</td></tr></tbody></table><p>平均周转时间T=(1.0+1.3+0.2+0.2)/4=0.675</p><p>平均带权周转时间W=(1.0+2.6+1.0+2.0)/4=1.65</p><p>HRN算法调度顺序：1，2，4，3，作业运行情况如下表</p><table><thead><tr><th>作业号</th><th>开始时间</th><th>完成时间</th><th>周转时间</th><th>带权周转时间</th></tr></thead><tbody><tr><td>1</td><td>8.0</td><td>9.0</td><td>1.0</td><td>1.0</td></tr><tr><td>2</td><td>9.0</td><td>9.5</td><td>1.0</td><td>2.0</td></tr><tr><td>3</td><td>9.6</td><td>9.8</td><td>0.8</td><td>4.0</td></tr><tr><td>4</td><td>9.5</td><td>9.6</td><td>0.5</td><td>5.0</td></tr></tbody></table><p>平均周转时间T=(1.0+1.0+0.8+0.5)/4=0.825</p><p>平均带权周转时间W=(1.0+2.0+4.0+5.0)/4=3.0</p><p><strong>2</strong>**、有一个具有两道作业的批处理系统，作业调度采用短作业优先的调度算法，进程调度采用以优先数为基础的抢占式调度算法，有如下表所示的作业序列，数值越小优先级越高。**</p><table><thead><tr><th><strong>作业名</strong></th><th><strong>到达时间</strong></th><th><strong>运行时间</strong></th><th><strong>优先数</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td><strong>10:00</strong></td><td><strong>40min</strong></td><td><strong>5</strong></td></tr><tr><td><strong>B</strong></td><td><strong>10:20</strong></td><td><strong>30min</strong></td><td><strong>3</strong></td></tr><tr><td><strong>C</strong></td><td><strong>10:30</strong></td><td><strong>50min</strong></td><td><strong>4</strong></td></tr><tr><td><strong>D</strong></td><td><strong>10:50</strong></td><td><strong>20min</strong></td><td><strong>6</strong></td></tr></tbody></table><p><strong>①</strong> <strong>列出所有作业进入内存的时间和结束时间。</strong></p><p><strong>②</strong>   <strong>计算平均周转时间。</strong></p><p><strong>【解答】</strong> 每个作业的运行将经历两级调度：作业调度和进程调度。只有当作业装入内存后，方能参与进程调度。每次只能有两道作业进入系统内存。</p><p>（1）作业进入内存时间和结束时间如下表</p><table><thead><tr><th>作业号</th><th>进入内存时间</th><th>结束时间</th></tr></thead><tbody><tr><td>A</td><td>10:00</td><td>11:10</td></tr><tr><td>B</td><td>10:20</td><td>10:50</td></tr><tr><td>C</td><td>11:10</td><td>12:00</td></tr><tr><td>D</td><td>10:50</td><td>12:20</td></tr></tbody></table><p>（2）各作业执行时的周转时间为：</p><p>作业A：70分钟 作业  B：30分钟  作业C：90分钟   作业D：90分钟</p><p>作业的平均周转时间T=(70+30+90+90)/4=70分钟。</p><p><strong>3</strong>**、假定某计算机系统有R1<strong><strong>和R2</strong></strong>两类可再使用资源，其中R1<strong><strong>有2</strong></strong>个单位，R2<strong><strong>有1</strong></strong>个单位。它们被进程P1<strong><strong>和P2</strong></strong>所共享，且已知两个进程均以如下顺序使用两类资源。–&gt;****申请R1–&gt;****申请R2–&gt;****申请R1–&gt;****释放R1–&gt;****释放R2–&gt;**<strong>释放R1–&gt;</strong></p><p><strong>试求出系统运行过程中可能到达的死锁点，并画出死锁点的资源分配图。</strong></p><p>答：当两个进程都执行完第1步（都占有了资源R1）时，系统进入不安全状态。这时，无论哪个进程执行完第2步，系统都将进入死锁状态。可能到达的死锁点是：进程P1占有一个单位的R1和一个单位的R2，而进程P2占有一个单位的R1。或者，正好相反。此时系统已无空闲资源，而P1和P2两个进程都不释放自己的资源并申请对方的资源，从而造成死锁。<br>死锁点的资源分配图（进程—资源图）如图所示。</p><p><strong>4</strong>**、**<strong>某系统有同类互斥资源m个，供n个进程共享使用。如果每个进程最多申请x个资源（1≤x≤m），试证明：当n(x-1)+1≤m时，系统不会发生死锁。</strong></p><p>**证明：**因为每个进程最多申请x个资源，所以最坏情况是每个进程都得到了（x-1）个资源，并且现在均需申请最后一个资源。此时，系统剩余资源数为m-n(x-1)，于是只要系统中至少还有一个资源可供使用，就可以使这n个进程中某个进程得到其所需要的全部资源，并能够继续执行到完成，归还资源可供其他进程使用。因而不会发生死锁。即只要 m-n(x-1)≥1时，系统就一定不会发生死锁。亦即当n(x-1)+1≤m时，系统不会发生死锁。</p><p><strong>5</strong>**、n个进程共享某种资源R（该资源共有m个可分配单位），每个进程一次一个地申请或释放资源单位。假设每个进程对该资源的最大需求量均小于m，且各进程最大需求量之和小于m+n，试证明该系统中不可能发生死锁。**</p><p>解：设max（i）表示第i个进程的最大资源需求量，need（i）表示第i个进程还需要的资源量，alloc（i）表示第i个进程已分配的资源量。由题中所给条件可知：</p><p><strong>max</strong>**（1****）＋…＋max****（n****）=<strong><strong>（need</strong></strong>（1****）＋…＋need****（n****））＋（alloc****（1****）+<strong><strong>…＋alloc</strong></strong>（n****））****＋n**如果在这个系统中发生了死锁，那么一方面m个资源应该全部分配出去，即</p><p>alloc（1）＋…＋alloc（n）= m另一方面所有进程将陷入无限等待状态。由上述两式可得：need（1）＋…＋need（n）上式表示死锁发生后，n个进程还需要的资源量之和小于n，这意味着此刻至少存在一个进程i，need（i）=0，即它已获得了所需要的全部资源。既然该进程已获得了它所需要的全部资源，那么它就能执行完成并释放它占有的资源，这与前面的假设矛盾，从而证明在这个系统中不可能发生死锁。<strong>6</strong>**、下表给出系统某时刻的资源分配情况。**  <strong>资源<strong><strong>进程</strong></strong>Allocation<strong><strong>Need</strong></strong>Available<strong><strong>R1</strong></strong>R2<strong><strong>R3</strong></strong>R1<strong><strong>R2</strong></strong>R3<strong><strong>R1</strong></strong>R2<strong><strong>R3</strong></strong>A<strong><strong>3</strong></strong>1<strong><strong>1</strong></strong>1<strong><strong>0</strong></strong>0<strong><strong>1</strong></strong>2<strong><strong>0</strong></strong>B<strong><strong>0</strong></strong>0<strong><strong>0</strong></strong>0<strong><strong>1</strong></strong>2<strong><strong>C</strong></strong>1<strong><strong>1</strong></strong>0<strong><strong>3</strong></strong>0<strong><strong>0</strong></strong>D<strong><strong>1</strong></strong>0<strong><strong>1</strong></strong>0<strong><strong>1</strong></strong>0<strong><strong>E</strong></strong>0<strong><strong>0</strong></strong>0<strong><strong>2</strong></strong>1<strong><strong>0</strong></strong>试问：（1</strong>**）该状态是否安全？<strong><strong>（2</strong></strong>）若进程B<strong><strong>提出请求RequestB</strong></strong>（0****，1****，0****），系统能否将资源分配给它？**  资源进程AllocationNeedworkWork+ AllocationFinishR1R2R3R1R2R3R1R2R3R1R2R3A311100120431TRUEC110300431541TRUED101010541642TRUEE000210642642TRUEB000012642642TRUE(1)能找到安全序列存在，其中之一为：A-&gt;C-&gt;D-&gt;E-&gt;B，所以该系统处于安全状态。（2）①：RequestB（0，1，0）≤<strong>Need</strong>B（0,1,2）   ②：RequestB（0，1，0）≤<strong>Available</strong>（1,2,0）   ③：假设可将资源分配给B，并修改有关数据：  <strong>资源<strong><strong>进程</strong></strong>Allocation<strong><strong>Need</strong></strong>Available<strong><strong>R1</strong></strong>R2<strong><strong>R3</strong></strong>R1<strong><strong>R2</strong></strong>R3<strong><strong>R1</strong></strong>R2<strong><strong>R3</strong></strong>A<strong><strong>3</strong></strong>1<strong><strong>1</strong></strong>1<strong><strong>0</strong></strong>0<strong><strong>1</strong></strong>1<strong><strong>0</strong></strong>B<strong><strong>0</strong></strong>1<strong><strong>0</strong></strong>0<strong><strong>0</strong></strong>2<strong><strong>C</strong></strong>1<strong><strong>1</strong></strong>0<strong><strong>3</strong></strong>0<strong><strong>0</strong></strong>D<strong><strong>1</strong></strong>0<strong><strong>1</strong></strong>0<strong><strong>1</strong></strong>0<strong><strong>E</strong></strong>0<strong><strong>0</strong></strong>0<strong><strong>2</strong></strong>1****0</strong>进入安全检查，发现任有安全序列存在，其中之一为：D-&gt;A-&gt;C-&gt;E-&gt;B。所以，当进程B提出请求RequestB（0，1，0），系统能将资源分配给它。<strong>7</strong>**、<strong><strong>什么是死锁？产生死锁的原因和必要条件？<strong><strong>死锁**是指在多道程序系统中，多个进程在运行过程中因争夺资源造成的一种僵局。<strong>产生原因：</strong>（1）竞争资源 （2）进程推进顺序不当。**产生的必要条件：<strong>1、互斥条件。进程对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占有。2、请求和保持条件。当进程因请求资源而阻塞时，对已获得的资源保持不放。3、不剥夺条件。进程已获得的资源，在未使用完前，不能被剥夺，只能在使用完时由自己释放。4、环路等待条件。在发生死锁时，必然存在一个进程-资源的环形链，即进程集合{P1，P2，。。。，PN}中的P1等待一个P2占用的资源，P2正在等待一个P3占用的资源，。。。，Pn正在等待已被P1所占用的资源。<strong>8</strong></strong>、<strong><strong>有5</strong></strong>个待运</strong></strong>行的作业为A</strong></strong>，B****，C****，D****，E****，各自估计运行时间为9****，6****，3****，5****，x****。试问采用哪种运行次序使得平均响应时间为最短？<strong><strong>响应时间=<strong><strong>等待时间+<strong><strong>要求服务时间</strong>    <strong>相等</strong>     <strong>周转时间=****结束时间-****到达时间</strong>答：由于短作业优先调度算法会使一组作业的平均周转时间最短，所以：当0＜x＜3时，应该采用的运行顺序为：E, C, D, B, A当3≤x≤5时，应该采用的运行顺序为：C，E，D，B，A当5＜x＜6时，应该采用的运行顺序为：C，D，E，B，A当6≤x≤9时，应该采用的运行顺序为：C，D，B，E，A当9＜x时，应该采用的运行顺序为：C，D，B，A，E**9</strong></strong>、<strong><strong>在操作系统中引入并发可提高系统效率。若有两个程序A</strong></strong>和B</strong></strong>，A</strong><strong>程序执行时所做的工作依次需要用CPU</strong>**：10s****；DEV1****：5s****；CPU****：5s****；DEV2****：10s****；CPU****：10s****。B<strong><strong>程序执行时所做的工作依次需要用DEV1</strong></strong>：10s****；CPU****：10s****；DEV2****：5s****；CPU****：5s****；DEV2****：10s****。请计算在顺序环境和并发环境下执行A<strong><strong>和B</strong></strong>两个程序，CPU****的利用率分别是多少？**答：①在顺序环境下执行A和B两个程序，CPU的利用率是50%    <strong>顺序</strong>，一共用时80s，CPU用时40， 40/80=50%。②在并发环境下执行A和B两个程序，CPU的利用率是89%（假设A程序先执行）<strong>并发</strong>，A：10s(CPU)，5s(DEV1)，5s (Wait)，5s(CPU)，10s(DEV2)，10s(CPU)B：10s(DEV)，10s(CPU)，5s(DEV2)，5s(CPU)，5s (Wait)，10s(DEV2)<br>用时45s，CPU40s，40/45=8/9=89%</p><p>第一次作业</p><p>第一题</p><p>未增加进程前，共运行4个用户进程，此时</p><p>CPU利用率＝1-（80%)^4 = 0.59</p><p>若再增加1MB 内存，系统中可同时运行9 个用户进程，此时：</p><p>CPU 利用率＝1-（80%)^9 = 0.87</p><p>故增加IMB 内存使CPU 的利用率提高了47 % :</p><p>第二题</p><p>2 一个计算机系统，有一台输入机和一台打印机，现有两道程序投入运行，且程序A 先开始做，程序B 后开始运行。程序A 的运行轨迹为：计算50ms 、打印100ms 、再计算50ms 、打印100ms ，结束。程序B 的运行轨迹为：计算50ms 、输入80ms 、再计算100ms ，结束。试说明（1 ）两道程序运行时，CPU有无空闲等待？若有，在哪段时间内等待？为什么会等待？( 2 ）程序A 、B 有无等待CPU 的情况？若有，指出发生等待的时刻。</p><p>答：画出两道程序并发执行图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/clip_image001.png" alt="在这里插入图片描述"></p><p>（1）两道程序运行期间，CPU存在空闲等待，时间为100 至150ms 之间（见图中有色部分）</p><p>（2）程序A 无等待现象，但程序B 有等待。程序B 有等待时间段为180rns 至200ms 间（见图中有色部分）</p><h2 id="第二次作业">第二次作业</h2><p>1.进程 P0 和 P1 的共享变量定义及初值为：<br>boolean flag[2]; int turn=0;<br>flag[0]=false;flag[1]=false;进程 P0 和 P1 访问临界资源的类 C 代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void P0 //进程 P0</span><br><span class="line">&#123; while (TRUE)</span><br><span class="line">&#123; flag[0]=TRUE;</span><br><span class="line">turn=1;</span><br><span class="line">wile (flag[1] &amp;&amp; turn==1);</span><br><span class="line">临界区;</span><br><span class="line">flag[0]=FALSE;</span><br><span class="line">&#125; &#125;</span><br><span class="line">void P1 //进程 P1</span><br><span class="line">&#123; while (TRUE)</span><br><span class="line">&#123; flag[1]=TRUE;</span><br><span class="line">turn=0;</span><br><span class="line">while (flag[0] &amp;&amp; turn==0);</span><br><span class="line">临界区;</span><br><span class="line">flag[1]=FALSE;</span><br><span class="line">&#125; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>则并发执行进程 P0 和 P1 时是否存在饥饿现象？ 为什么？</p><p>2.有两个并发执行的进程 P1 和 P2， 共享初值为 1 的变量 x， P1 对 x 加 1， P2 对 x 减 1。 加 1和减 1 操作的指令序列分别如下所示。</p><p>P1： //加 1 操作</p><p>load R1， x //取 x 到寄存器 R1 中</p><p>inc R1</p><p>store x， R1//将 R1 的内容存入 x</p><p>P2： //减 1 操作</p><p>Load R2， x</p><p>dec R2</p><p>store x， R2</p><p>两个操作完成后， x 的值 。</p><p>3.单处理机系统中， 可并行的是 。</p><p>Ⅰ . 进程与进程      Ⅱ . 处理机与设备</p><p>III.处理机与通道IV.设备与设备</p><p>A. Ⅰ 、 Ⅱ 和Ⅲ   B. Ⅰ 、 Ⅱ 和Ⅳ</p><p>C. Ⅰ 、 Ⅲ和Ⅳ    D. Ⅱ 、 Ⅲ和Ⅳ</p><p>4.设系统中有 n（n&gt;2） 个进程， 且当前不在执行进程调度程序， 试考虑下述 4 种情况：<br>1.有 1 个运行进程， n-1 个就绪进程， 没有进程处于等待状态。<br>2.有 1 个运行进程， 没有就绪进程， n-1 进程处于等待状态。<br>3.有 1 个运行进程， 有 1 个就绪进程， n-2 进程处于等待状态。                               4.没有运行进程， 有 2 个就绪进程， n 个进程处于等待状态</p><p>上述情况中， 不可能发生的情况是_____。</p><p>7.使用两个变量i和j分别记录当前的取号值和叫号值，并各自使用一个互斥信号用于对i和j的访问和修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">int i=0,j=0;</span><br><span class="line">semaphore mutex_i=1,mutex_j=1;</span><br><span class="line">Consumer()</span><br><span class="line">&#123;</span><br><span class="line">//进入面包店</span><br><span class="line">p(mutex_i);</span><br><span class="line">//取号i</span><br><span class="line">i++;</span><br><span class="line">v(mutex_i);</span><br><span class="line">//等待叫号i并购买面包</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Seller()</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">p(mutex_j);</span><br><span class="line">if(j&lt;i) //号j已有顾客取走并等待</span><br><span class="line">&#123;</span><br><span class="line">//叫号j</span><br><span class="line">j++;</span><br><span class="line">v(mutex_j);</span><br><span class="line">//销售面包</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">v(mutex_j);</span><br><span class="line">//休息片刻</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.设置空缓冲区的数目，用 empty 表示，其初值为 N，满缓冲单元的数目（即字符数目），用 full 表示，其初值为 0，存在缓存区但未处理的字符数目，用 undeal 表示，其初值为 0，存在缓存区且已处理的字符数目，用 dealed 表示，其初值为 0，还设置一个互斥信号量 mutex，其初值为 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">semaphore full=0;              </span><br><span class="line">semaphore empty=N;              </span><br><span class="line">semaphore undeal=0;             </span><br><span class="line">semaphore dealed=0;             </span><br><span class="line">semaphore mutex=1;              </span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">cobegin</span><br><span class="line">R();</span><br><span class="line">M();</span><br><span class="line">P();</span><br><span class="line">coend</span><br><span class="line">&#125;</span><br><span class="line">R()</span><br><span class="line">&#123;</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">读一个字符;</span><br><span class="line">P(empty);</span><br><span class="line">P(mutex);</span><br><span class="line">将一个字符送入缓冲区;</span><br><span class="line">V(mutex);</span><br><span class="line">V(undeal)</span><br><span class="line">V(full);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">M()</span><br><span class="line">&#123;</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">P(undeal);</span><br><span class="line">P(mutex);</span><br><span class="line">处理字符;</span><br><span class="line">V(mutex);</span><br><span class="line">V(dealed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">P()</span><br><span class="line">&#123;</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">P(full)</span><br><span class="line">P(dealed);</span><br><span class="line">P(mutex);</span><br><span class="line">从缓冲区中取一个字符;</span><br><span class="line">V(mutex);</span><br><span class="line">V(empty);</span><br><span class="line">打印一个字符;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>12.设置一个学生进程用来申请进入机房和申请教师检查，一个教师进程用来检查一组学生是否完成并进行检查，一 个门卫进程用来检查一组两个学生是否到齐和检查机房是否有两台计算机。信号量student表示是否有学生；computer表示当前可用的计算机的数量；enter是机房的准入通道；finish表示是否有学生完成了实习；check是老师时候检查完一组学生。初始情况下，除了computer设为2m, 其余都应该是0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">semaphore student=0;</span><br><span class="line">semaphore computer=2m;</span><br><span class="line">semaphore enter=0;</span><br><span class="line">semaphore finish=0;</span><br><span class="line">semaphore check=0;</span><br><span class="line"></span><br><span class="line">//学生进程</span><br><span class="line">Student() &#123;</span><br><span class="line">      </span><br><span class="line">    while(1) &#123;</span><br><span class="line">     </span><br><span class="line">        V(student);  //有学生到达</span><br><span class="line">        P(computer); //获取一台计算机</span><br><span class="line">        P(enter);    //申请进入</span><br><span class="line">        do(); //实习</span><br><span class="line">        V(finish);   //完成实习</span><br><span class="line">        P(check);     //申请检查</span><br><span class="line">        V(computer); //释放计算机</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//老师进程</span><br><span class="line">Teacher() &#123;</span><br><span class="line">     </span><br><span class="line">    while(1) &#123;</span><br><span class="line">     </span><br><span class="line">        P(finsh);    //等待学生实习结束</span><br><span class="line">        P(finsh);    //等待另一个学生实习结束</span><br><span class="line">        check(); //检查</span><br><span class="line">        V(check);     //允许学生离开</span><br><span class="line">        V(check);     //允许另一个学生离开</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//门卫进程</span><br><span class="line">Guard() &#123;</span><br><span class="line">     </span><br><span class="line">    while(1) &#123;</span><br><span class="line">     </span><br><span class="line">        P(student);   //等待一名学生</span><br><span class="line">        P(student);   //等待另一名学生</span><br><span class="line">        P(computer);  //申请一台计算机</span><br><span class="line">        P(computer);  //申请另一台计算机</span><br><span class="line">        V(enter);     //允许学生进入</span><br><span class="line">        V(enter);     //允许另一名学生进入</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="14"><li></li></ol><p>解:三个学徒编号为0~2，设置三个信号量，用数组a表示，初值均为0，桌面作为临界区为互斥操作设置一个信号量mutex，其初值为1。对应的同步描述如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Semaphore a[3]=[0,0,0];//设a[0]代表学徒0，a[1]代表学徒1， a[2]代表学徒2</span><br><span class="line">Semaphore mutex=1;</span><br><span class="line">main()</span><br><span class="line">&#123;      Cobegin</span><br><span class="line">       sf();xt(O);xt(1);xt(2);</span><br><span class="line">       Coend</span><br><span class="line"> &#125;</span><br><span class="line">sf()    //师傅进程</span><br><span class="line">&#123;   while (true)</span><br><span class="line">   &#123;   i=rand()%3;</span><br><span class="line">       j=rand()%3;</span><br><span class="line">       P(mutex);</span><br><span class="line">       放两个零件到桌面;</span><br><span class="line">       if (i!=j)</span><br><span class="line">       &#123;    if (i==0 &amp;&amp; j==1) V(a[2]);</span><br><span class="line">            else if (i==1 &amp;&amp; j==2) V(a[o]);</span><br><span class="line">            eles V(a[1]);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">xt(i)   //学徒i进程( i=1,1,2)</span><br><span class="line">&#123;    while (true) ;</span><br><span class="line">     &#123;   P(a[i]);</span><br><span class="line">         取两个零件组装产品;</span><br><span class="line">         V(mutex);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/QQ%E5%9B%BE%E7%89%8720220419211240.jpg" alt=""></p><p>（1）Job1 从投入到运行完成需110ms , Job2 从投入到运行完成需90ms , Job3 从投入到运行完成需110ms.</p><p>（2）CPU 空闲时间段共有30ms ，所以CPU 利用率为（110-30）/110 = 72.7 ％。</p><p>（3）设备I1 空闲时间段有30ms,故I1的利用率为 (110-30)/l10 = 72 . 7 ％。<br>设备I2 空闲时间段有20ms，故I2的利用率为(110-20) / 110 = 81.8 ％。</p><p>9、</p><p>（1）因为存在安全序列，所以此时系统安全。</p><p>（2）若满足进程B的请求，则可用资源变为&lt;1，1，0&gt;，此时系统存在安全序列，D-&gt;A-&gt;C-&gt;E-&gt;B，所以能分配。</p><p>（3）若满足进程E的请求，则可用资源变为&lt;1，1，0&gt;，此时系统存在安全序列，所以能分配。</p><p>10、</p><table><thead><tr><th></th><th>已占有</th><th>还需要</th><th>剩余资源</th></tr></thead><tbody><tr><td>P1</td><td>25</td><td>45</td><td>40</td></tr><tr><td>P2</td><td>40</td><td>20</td><td></td></tr><tr><td>P3</td><td>45</td><td>15</td><td></td></tr><tr><td>P4</td><td>0</td><td>60</td><td></td></tr></tbody></table><p>(1)由于系统目前还有40个单元，P4进程到达，把25个单元分给它。这时系统还余15个单元,可把15个单元分给P3，它执行完后会释放60个单元。于是可供P1(还要45个单元),P2(还要20个单元)，P4(还要35个单元)任何一个执行，安全序列为:<br>P1, P2, P3,P4；P3,P1，P2,P4</p><p>(2)P4进程到达，P4最大需求60,最初请求35。如果把35个单元分给P4，系统还余5<br>个单元,不再能满足任何一个进程的需求,系统进入不安全状态·</p><p>12、</p><p>设每个进程对共享资源的最大需求量为x(0＜x≤m)，假设系统发生死锁，每个进程都得到了(x-1)个资源i并且都需申请最后一个资源。这时系统剩余资源数为：m-n(x-1)。</p><p>当m-m(x-1)≥1时系统不会发生死锁。进而可得系统中所有进程的最大需求量之和n·x≤(m+n-1)时系统不会发生死锁，而进程最大需求量之和小于m+n，所以，不会发生死锁。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/QQ%E5%9B%BE%E7%89%8720220420141330.jpg" alt=""></p><p>课堂作业：</p><table><thead><tr><th></th><th>已占有</th><th>还需要</th><th>剩余资源</th></tr></thead><tbody><tr><td>P1</td><td>25</td><td>45</td><td>40</td></tr><tr><td>P2</td><td>40</td><td>20</td><td></td></tr><tr><td>P3</td><td>45</td><td>15</td><td></td></tr><tr><td></td><td>0</td><td>60</td><td></td></tr></tbody></table><p>（5）一个 32 位地址的计算机系统使用二级页表，虚地址被分为 9 位顶级页表，11 位二级页表和偏移。试问：页表长度是多少？虚地址空间共有多少个页面？</p><p>（6）某计算机有缓存、内存、辅存来实现虚拟存储器。如果数据在缓存中，访问它需要 Ans；如果在内存但不在缓存，需要 Bns 将其装入缓存，然后才能访问；如果不在内存而在辅存，需要 Cns 将其读入内存，然后，用 Bns 再读入缓存，然后才能访问。假设缓存命中率为（n-1）/n，内存命中率为（m-1）/m，则数据平均访问时间是多少？</p><p>（7）一台机器有 48 位虚地址和 32 位物理地址，若页长为 8KB，问页表共有多少<br>个页表项?如果设计一个反置页表，则有多少个页表项？</p><p>（8）有两台计算机 P1 和 P2，它们各有一个硬件高速缓冲存储器 C1 和 C2，且各<br>有一个主存储器 M1 和 M2。其性能为：</p><table><thead><tr><th></th><th>C1</th><th>C2</th><th>M1</th><th>M2</th></tr></thead><tbody><tr><td>存储容量</td><td>4KB</td><td>4KB</td><td>2MB</td><td>2MB</td></tr><tr><td>存取周期</td><td>60ns</td><td>80ns</td><td>1μm</td><td>0.9μm</td></tr></tbody></table><p>若两台机器指令系统相同，它们的指令执行时间与存储器的平均存取周期成正比。如果在执行某个程序时，所需指令或数据在高速缓冲存储器中存取到的概率 P 是 0.7，试问：<br>这两台计算机哪个速度快？当 P=0.9 时，处理器的速度哪个快？</p><p>（9）某计算机系统提供 24 位虚存空间，主存为 218 字节，采用分页式虚拟存储管理，页面尺寸为 256 字节。假定用户程序产生了虚拟地址 11123456（八进制），假设其对应的块号为 315（八进制），试说明该系统是如何进行地址变换的，相应的物理地址是什么(用八进制表示)？</p><p>（9）</p><p>虚拟地址11123456 （八进制）转化为二进制为：<br>001 001 001 010 011 100 101 110<br>其中前面为页号，而后10 位为位移：001 001 001 010 01-------1 100 101 110 。由于主存大小为218 字节，页面尺寸为256字节=$$2^8$$B ，所以，主存共有256 块。所以，块号为100 （八进制）是合法地址，于是，物理地址为100 （八进制）与位移1 100 101 110 并接，得到：八进制物理地址001000000 1 100 101 110 = = 201456 （八进制）。</p><p>（5）</p><p>页表长度为 232 = 4 KB；<br>偏移量为 12 位，页面大小为 $$12^ {12}$$，所以页面数量为 232 / 212 = 220 = 1 M；</p><p>（6）</p><p>数据在缓存中的比率为:$$(n-1)/n$$</p><p>数据在内存中的比率为:$$(1-(n-1)/n)×(m-1)/m=(m-1)/nm$$</p><p>数据在辅存中的比率为:$$(1-(n-1)/n)×(1-(m-1)/m)=1/nm$$</p><p>故数据平均访问时间是$$=((n-1)/n)×A+((1-(n-1)/n)×(m-1)/m)×(A+B)+( (1-(n-1)/n)×(1-(m-1)/m))×(A+B+C)$$</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>=</mo><mi>A</mi><mo>+</mo><mi>B</mi><mi mathvariant="normal">/</mi><mi>n</mi><mo>+</mo><mi>C</mi><mi mathvariant="normal">/</mi><mi>n</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">=A+B/n+C/nm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">/</span><span class="mord mathnormal">nm</span></span></span></span></span></p><p>（7）</p><p>页表项：$$2^{48}/2^{13 }= 2^{35}$$</p><p>反置页表项：$$2^{32}/2^{13} = 2^{19}$$</p><p>（8）</p><p>CPU平均存取时间为：T=p×T1+(1-p)×T2，T1为高速缓冲存储器存取周期，T2为主存储器存取周期，p为高速缓冲存储器命中率。</p><ul><li>当p=0.7时，</li></ul><p>P1平均存取时间为：0.7×60+(1-0.7)×1μs=342ns</p><p>P2平均存取时间为：0.7×80+(1-0.7)×0.9μs=326ns</p><p>故计算机P2比P1处理速度快</p><ul><li>当p=0.9时，</li></ul><p>P1平均存取时间为：0.9×60+(1-0.9)×1μs=154ns</p><p>P2平均存取时间为：0.9×80+(1-0.9)×0.9μs=162ns</p><p>故计算机P1比P2处理速度快。</p><h1>第二次进程作业</h1><p>系统有A类临界资源m个，系统有n个进程，每个进程都需要A类临界资源一个，若用信号量S的P、V操作来进行同步，请分析信号量的取值范围。</p><ul><li>若没有进程使用资源     m</li><li>只有一个进程使用</li></ul><p>有3个进程A、B、C需要循环使用共享的打印机，请给出用信号量和P、V操作实现同步控制的进程描述，并说明信号量的取值范围。</p><p>设有4个进程共享一程序段，而每次最多允许两个进程进入该程序段，则信号量的取值范围是多少。</p><p>一个快餐厅有4种职员：（1）领班：接受顾客点菜；（2）厨师：准备顾客的饭菜；（3）打包工：将做好的饭菜打包；（4）出纳员－收款并提交食品。每个职员可被看作一个进程，试写出能让四类职员正确并发运行的程序。</p><p>三个进程P1、P2、P3互斥使用一个包含N(N&gt;0)个单元的缓冲区，<br>P1每次用produce()生成一个正整数并用put()送入缓冲区某一空单元中；<br>P2每次用getodd()从该缓冲区中取出一个奇数并用countodd()统计奇数个数；<br>P3每次用geteven()从该缓冲区中取出一个偶数并用counteven()统计偶数个数。<br>请用信号量机制实现这三个进程的同步与互斥活动，并说明所定义的信号量含义。要求用伪代码编写。</p><p>1.不会出现，因为可以保证进程并发进入临界区</p><ol start="2"><li></li></ol><p>将P1中3条语句依次编号为1、2、3；P2中3条语句依次编号为4、5、6。则依次执行1、2、3、4、5、6得到1，依次执行1、2、4、5、6、3得到2，执行4、5、1、2、3、6得到0。</p><p>故x的可能值为0,1,2</p><p>3.D单处理机中进程是并发进行，不能并行</p><p>4.不可能发生的是4，就绪队列中有2个进程且n个进程处于等待状态，这样系统中就有n+2个进程，与题目条件不符合；另外如果没有运行进程且就绪队列非空，处理机不应休闲，而应该调度一个进程来运行，因此错误</p><ol><li></li></ol><p>m个资源=信号量初始值； n个进程同时请求m个东西时为m-n</p><p>故信号量取值范围为-(n-m)~m</p><ol start="2"><li></li></ol><p>信号量的取值范围是-2~1</p><ol start="3"><li></li></ol><p>每次允许2个进程进入，可能出现的情况是：</p><p>①没有进程进入；</p><p>②有一个进程进入；</p><p>③有两个进程进入；</p><p>④有两个进程进入并有两个进程等待进入。</p><p>对应的信号量值为2、1、0、-2。</p><ol start="4"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">semaphore S1,S2,S3,S4;</span><br><span class="line">S1=1;S2=S3=S4=0;</span><br><span class="line">cobegin</span><br><span class="line">&#123;process P1</span><br><span class="line">    begin</span><br><span class="line">    repeat</span><br><span class="line">有顾客;</span><br><span class="line">  P(S1);</span><br><span class="line">  接受顾客点菜;</span><br><span class="line">  V(S2);</span><br><span class="line">  until false;</span><br><span class="line">end</span><br><span class="line">process P2</span><br><span class="line">    begin</span><br><span class="line">    repeat</span><br><span class="line">  P(S2);</span><br><span class="line">  准备顾客的饭菜;</span><br><span class="line">  V(S3);</span><br><span class="line">  until false;</span><br><span class="line">end</span><br><span class="line">process P3</span><br><span class="line">    begin</span><br><span class="line">    repeat</span><br><span class="line">  P(S3);</span><br><span class="line">  将做好的饭菜打包;</span><br><span class="line">  V(S4);</span><br><span class="line">  until false;</span><br><span class="line">end</span><br><span class="line">process P4</span><br><span class="line">    begin</span><br><span class="line">    repeat</span><br><span class="line">  P(S4);</span><br><span class="line">  收款;</span><br><span class="line">  V(S1);</span><br><span class="line">  until false;</span><br><span class="line">end</span><br><span class="line">&#125;</span><br><span class="line">coend</span><br></pre></td></tr></table></figure><ol start="5"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//定义信号量</span><br><span class="line">semaphore  mutex=1；</span><br><span class="line">semaphore odd=0;</span><br><span class="line">semaphore even=0；</span><br><span class="line">//P1、P2和P3共享的缓冲区的空位需要一个</span><br><span class="line">semaphore empty=N；</span><br><span class="line"></span><br><span class="line">P1()&#123;</span><br><span class="line">while(true)&#123;</span><br><span class="line">p(empty);</span><br><span class="line">num = produce();</span><br><span class="line">p(mutex);</span><br><span class="line">put();</span><br><span class="line">v(mutex);</span><br><span class="line">if(num%2 == 0)</span><br><span class="line">v(even);</span><br><span class="line">else</span><br><span class="line">v(odd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">P2()&#123;</span><br><span class="line">while(1)&#123;</span><br><span class="line">p(odd);</span><br><span class="line">p(mutex);</span><br><span class="line">getodd();</span><br><span class="line">countodd();</span><br><span class="line">v(mutex);</span><br><span class="line">v(empty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">P3()&#123;</span><br><span class="line">while(1)&#123;</span><br><span class="line">p(even);</span><br><span class="line">p(mutex);</span><br><span class="line">geteven();</span><br><span class="line">counteven();</span><br><span class="line">v(mutex);</span><br><span class="line">v(empty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>层次分析法|评价类模型</title>
      <link href="/2022/03/21/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/"/>
      <url>/2022/03/21/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>建模中最基础的模型之一，主要用于解决评价类问题（哪种方案最好，哪位运动员或者员工表现的更优秀</p></blockquote><h1>层次分析法的步骤</h1><p>不妨用假期旅游为例，假如有P1，P2，P3 3个旅游胜地供你选择，你会根据诸如景色、费用和居住、饮食、旅途条件等一些准则去反复比较那3个候选地点．首先，你会确定这些准则在你的心目中各占多大比重，如果你经济宽绰、醉心旅游，自然特别看重景色条件，而平素俭朴或手头拮据的人则会优先考虑费用，中老年旅游者还会对居住、饮食等条件寄以较大关注．其次，你会就每一个准则将3个地点进行对比，譬如P1景色最好，P2次之；P2次之；P3居住等条件较好等等．最后，你要将这两个层次的比较判断进行综合，在P1,P2,P3中确定哪个作为最佳地点。</p><p>1.分析系统中各因素之间的关系，建立系统的递阶层次结构</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220321084739746.png" alt="image-20220321084739746"></p><p>2.构造判断矩阵</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220321084937805.png" alt="image-20220321084937805"></p><blockquote><p>涉及到社会、经济、人文等因素的决策问题的主要困难在于，这些因素通常不易定量地量测．人们凭自己的经验和知识进行判断，当因素较多时给出的结果往往是不全面和不准确的，如果只是定性的结果，则常常不容易被别人接受．Saaty等人的作法，一是不把所有因素放在一起比较，而是两两相互对比，二是对比时采用相对尺度，以尽可能地减少性质不同的诸因素相互比较的困难，提高准确度．</p></blockquote><p>成对比较矩阵（正互反矩阵）：元素两两之间对比，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>a</mi><mi>i</mi><mi>j</mi><mo>=</mo><mfrac><mn>1</mn><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mfrac><mspace width="2em"/><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">a_{ij}&gt;0,aij=\frac{1}{a_{ij}} \qquad  (i,j=1,2,...,n)        \tag{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8252em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">aij</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2935em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="tag"><span class="strut" style="height:2.2935em;vertical-align:-0.9721em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p><p>A称为成对比较或判断矩阵。满足（1）的矩阵称为正互反矩阵。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220321094402537.png" alt="image-20220321094402537"></p><p>如果成对比较是绝对一致的，则应该有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>12</mn></msub><mi mathvariant="normal">.</mi><mi>a</mi><mn>23</mn><mo>=</mo><mi>a</mi><mn>13</mn></mrow><annotation encoding="application/x-tex">a_{12}.a{23}=a{13}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord">23</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord">13</span></span></span></span></span>,但实际上会出现不相等。</p><p>引入一致阵的概念：如果一个正互反矩阵A满足</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>j</mi><mi>k</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><mspace width="2em"/><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">a_{ij}.a_{jk}=a_{ik}  \qquad  (i,j=1,2,...,n)  \tag {2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">jk</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">ik</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="tag"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p>则称A为一致阵。</p><blockquote><p>1)n阶正互反矩阵为一致阵—最大特征值$ \lambda_{max}=n$</p><p>2)权向量：当A是一致阵时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>m</mi></msub><mo>=</mo><mi>n</mi><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mfrac><msub><mi>ω</mi><mi>i</mi></msub><msub><mi>ω</mi><mi>j</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\lambda_{m}=n,a_{ij}=\frac{\omega_{i}}{\omega_{j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2538em;vertical-align:-0.5423em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7115em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>,设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\omega=(\omega_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">\lambda_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的标准化特征向量，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><msub><mi>ω</mi><mi>i</mi></msub></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{\omega_{i}}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1498em;vertical-align:-0.3998em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0017em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3998em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>例如：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>6</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">A=\left(\begin{matrix}1 &amp; 2 &amp; 6 \\1/2 &amp; 1 &amp; 3 \\1/6 &amp; 1/3 &amp; 1\end{matrix}\right) \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.875em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='0.016em' style='width:0.875em' viewBox='0 0 875 16' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V16 H291z M291 0 H417 V16 H291z'/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1/2</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1/6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1/3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.875em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='0.016em' style='width:0.875em' viewBox='0 0 875 16' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V16 H457z M457 0 H583 V16 H457z'/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>是一致阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>m</mi></msub><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>ω</mi><mo>=</mo><mo stretchy="false">(</mo><mn>0.6</mn><mo separator="true">,</mo><mn>0.3</mn><mo separator="true">,</mo><mn>0.1</mn><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">\lambda_{m}=3,\omega=(0.6,0.3,0.1)&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0.3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0.1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></p><p>很多情况下A不是一致的，这时仍称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">\lambda_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的标准化特征向量为权向量，如：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>6</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(4)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">A=\left(\begin{matrix}1 &amp; 2 &amp; 6 \\1/2 &amp; 1 &amp; 4 \\1/6 &amp; 1/4 &amp; 1\end{matrix}\right) \tag{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.875em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='0.016em' style='width:0.875em' viewBox='0 0 875 16' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V16 H291z M291 0 H417 V16 H291z'/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1/2</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1/6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1/4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.25em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.397em;"><span class="pstrut" style="height:3.155em;"></span><span style="height:0.016em;width:0.875em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='0.016em' style='width:0.875em' viewBox='0 0 875 16' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V16 H457z M457 0 H583 V16 H457z'/></svg></span></span><span style="top:-4.05em;"><span class="pstrut" style="height:3.155em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">4</span></span><span class="mord">)</span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>m</mi></msub><mo>=</mo><mn>3.01</mn></mrow><annotation encoding="application/x-tex">\lambda_{m}=3.01</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3.01</span></span></span></span>. A不一致。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo>=</mo><mo stretchy="false">(</mo><mn>0.588</mn><mo separator="true">,</mo><mn>0.322</mn><mo separator="true">,</mo><mn>0.09</mn><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">\omega=(0.588,0.322,0.09)&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.588</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0.322</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0.09</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>ω</mi><mo>=</mo><mi>λ</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">A\omega=\lambda\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">λω</span></span></span></span></p></blockquote><p>权重计算：全部一致的要求太苛刻了，Saaty等人给出了在成对比较不一致的情况下计算各因素C1，…,Cn对因素O的权重的方法</p><p>3.计算权重，并进行一致性检验（检验通过权重才能用）</p><p>三种方法计算权重：算术平均法，几何平均法，特征值法；最好三种都用</p><blockquote><p>注：（1）一致矩阵不需要进行一致性检验，只有非一致矩阵的判断矩阵才需要进行一致性检验；（2）在论文写作中，应该先进行一致性检验，通过检验后再计算<br>权重</p></blockquote><p>一致性检验的步骤</p><blockquote><p>成对比较阵通常不是一致阵，但是为了能用它的对应于特征根又的特征向量作为被比较因素的权向量，其不一致程度应在容许范围内．怎样确定这个范围呢?</p></blockquote><blockquote><p>前面已经给出n阶一致阵的特征根是n，在本节第三小节将证明的一个重要定理表明，，I阶正互反阵A的最大特征根<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\lambda&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，而当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\lambda=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>时A是一致阵．</p><p>根据这个定理和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span>连续地依赖于的事实可知，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span>比n大得越多，A的不一致程度越严重，用特征向量作为权向量引起的判断误差越大．因而可以用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\lambda-n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>数值的大小来衡量A的不一致程度．</p></blockquote><p>第一步：计算一致性指标CI</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>C</mi><mi>I</mi><mo>=</mo><mfrac><mrow><msub><mi>λ</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(5)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">CI=\frac{\lambda_{max}-n}{n-1}\tag{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1408em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:2.1408em;vertical-align:-0.7693em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">5</span></span><span class="mord">)</span></span></span></span></span></span></p><p>第二步：查找对应的平均随机一致性指标RI</p><blockquote><p>计算RI的过程是：对于固定的n，随机地构造正互反阵A，（它的元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">(</mo><mi>i</mi><mo>&lt;</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a&#x27;_{ij}(i&lt;j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1467em;vertical-align:-0.3948em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3948em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>从1~9, 1~1/9中随机取值），然后计算A的一致性指标CI，构造相当多的A’，用它们的CI的平均值作为随机一致性指标。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220321090112623.png" alt="image-20220321090112623"></p><p>第三步：计算一致性比例CR</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>R</mi><mo>=</mo><mfrac><mrow><mi>C</mi><mi>I</mi></mrow><mrow><mi>R</mi><mi>I</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">CR=\frac{CI}{RI}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">CR</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>如果CR&lt;0.1，则可认为判断矩阵的一致性可以接受，可用其特征向量作为权向量；否则需要对判断矩阵进行修正</p><p>第四步：根据权重矩阵计算得分，并进行排序</p><p>得到第2层（准则层）对第1层（目标层，只有一个因素）的权向量，用同样的方法构造第3层（方案层）对第2层的每一个准则的成对比较矩阵</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220322200957261.png" alt="image-20220322200957261"></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220322201305637.png" alt="image-20220322201305637"></p><p>AHP 的优点<br>1、 系统性 AHP 把研究对象作为一个系统，按照分解、比较判<br>断、综合的思维方式进行决策，成为继机理分析、统计分析之后发展<br>起来的系统分析的重要工具。<br>2、 实用性 AHP 把定性和定量方法结合起来，能处理许多用传<br>统的最优化技术无法着手的实际问题，应用范围很广。同时，这种方<br>法将决策者与决策分析者相互沟通，决策者甚至可以直接应用它，这<br>就增加了决策的有效性。<br>3、 简洁性 具有中等文化程度的人即可了解 AHP 的基本原理和<br>掌握其基本步骤，计算也非常简便，且所得结果简单明确，容易为决<br>策者了解和掌握。<br>AHP 的缺点<br>1、 AHP 只能从原有方案中选优，不能生成新方案。<br>2、 AHP 的比较、判断直到结果都是粗糙的，不适于精度要求很<br>高的问题。 （数据包络法 DEA、逼近理想解排序法 TOPSIS、熵权法、<br>模糊综合评判法等适合精度要求较高的问题）<br>3、从建立层次结构模型到给出成对比较矩阵，人的主观因素的<br>作用很大，这就使得决策结果可能难以为众人接受。当然，采取专家<br>群体判断的办法是克服这个缺点的一种途径。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诗词格律</title>
      <link href="/2022/03/20/%E8%AF%97%E8%AF%8D%E6%A0%BC%E5%BE%8B/"/>
      <url>/2022/03/20/%E8%AF%97%E8%AF%8D%E6%A0%BC%E5%BE%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>诗韵和平仄是诗词格律最为重要的两件事。</p></blockquote><h1>平仄</h1><p>古代有四个声调</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统进程管理</title>
      <link href="/2022/03/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2022/03/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h1><blockquote><p>是资源分配的基本单位，也是独立运行的基本单位。为了描述并发程序执行时的特征，引入了进程。</p></blockquote><h2 id="1、进程的引入"><a href="#1、进程的引入" class="headerlink" title="1、进程的引入"></a>1、进程的引入</h2><h3 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h3><blockquote><p>前趋图是一个有向无循环图，用于描述程序、程序段或语句执行的先后次序。</p><ul><li><p>如果(Pi，Pj)∈→，可以写成Pi→Pj，则称Pi是Pj的直接前趋，Pj是Pi的直接后继。</p></li><li><p>若存在一个序列Pi→Pj→…→Pk，则称Pi是Pk的前趋。</p></li><li><p>在前趋图中，没有前趋的结点称为初始结点，没有后继的结点称为终止结点。 </p></li></ul></blockquote><p><img src="https://user-images.githubusercontent.com/38368052/54079942-2083c880-4321-11e9-8d21-b82bf08edecb.jpg" alt="前驱图例"></p><h3 id="程序的顺序执行"><a href="#程序的顺序执行" class="headerlink" title="程序的顺序执行"></a>程序的顺序执行</h3><blockquote><p>按照某种先后次序来执行。</p><ul><li><p>顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一个操作必须在下一个操作开始之前结束。</p></li><li><p>封闭性：程序一旦开始运行，其执行结果不受外界因素影响。</p></li><li><p>可再现性：只要程序执行时的初始条件和执行环境相同，当程序重复执行时，都将获得相同的结果。</p></li></ul></blockquote><h3 id="程序的并发执行及特点"><a href="#程序的并发执行及特点" class="headerlink" title="程序的并发执行及特点"></a>程序的并发执行及特点</h3><p>程序的并发执行是指若干个程序（或程序段）同时在系统中运行，这些程序（或程序段）的执行在时间上是重叠的，一个程序（或程序段）的执行尚未结束，另一个程序（或程序段）的执行已经开始。</p><blockquote><p>进程1、2、3并发执行。对每个进程而言，其输入、计算和输出这三个操作必须顺序执行。它们之间存在如下先后关系：</p><p>I1先于C1和I2 ， C1先于P1和C2 ， P1先于P2</p><p>I2和C1 ， I3、 C2和P1可以并发。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220316085754492.png" alt="image-20220316085754492" style="zoom: 33%;" /></p><ol><li><p>间断性：并发程序具有“执行—-暂停——执行”这种间断性的活动规律。</p></li><li><p>失去封闭性：多个程序共享系统中的资源，这些资源的状态将由多个程序来改变，致使程序之间相互影响。</p></li><li><p>不可再现性：在初始条件相同的情况下，程序的执行结果依赖于执行的次序。</p></li></ol><blockquote><p>程序并发执行时可能出现与时间有关的错误。</p><p>进程1：r1=x；      进程2：r2=x；</p><p>​         r1++；           r2++；</p><p>​        x=r1；            x=r2；</p><p>设在两进程运行之前，x的值为0。则两进程运行结束后，x值可为：1,2</p></blockquote><h3 id="1-4-程序并发执行的条件"><a href="#1-4-程序并发执行的条件" class="headerlink" title="1.4 程序并发执行的条件"></a>1.4 程序并发执行的条件</h3><p>读集：语句执行期间要引用的变量集合，记为R（Si）={a1，…，am}</p><p>写集：语句执行期间要改变的变量集合，记为W（Si）={b1，…，bn}</p><p><strong>Bernstein条件</strong></p><p>Bernstein条件能保证两个程序段并发执行而不会产生与时间有关的错误：</p><ul><li><p>R (Si) ∩ W (Sj) ={ } 这两条保证</p></li><li><p>R (Sj) ∩ W (Si) ={ } 两次读之间数据不变</p></li><li><p>W (Si) ∩ W (Sj) ={ } 本条保证写操作结果不丢失</p><blockquote><p>考虑下面4条语句：</p><p>  S1：a=x+y      S2：b=z+1</p><p>  S3：c=a-b      S4：d=c+1</p><p>R(S1)={x,y}   R(S2)={z}   R(S3)={a,b}</p><p>  W(S1)={a}    W(S2)={b}   W(S3)={c}</p><p>因R(S1)∩ W(S2)∪R(S2)∩ W(S1)∪W(S1)∩W(S2)={ }，故S1和S2可以并发执行 。 </p><p>因R(S2)∩ W(S3)∪R(S3)∩ W(S2)∪W(S3)∩W(S2)={b}，故S2和S3不能并发执行 。 </p></blockquote></li></ul><p>并发语句的描述方式</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220316091320352.png" alt="image-20220316091320352"></p><h2 id="2、进程的定义及描述"><a href="#2、进程的定义及描述" class="headerlink" title="2、进程的定义及描述"></a>2、进程的定义及描述</h2><p>特征：</p><ul><li><p>动态性：进程是程序的一次执行过程。动态性还表现为它因创建而产生，因调度而执行，因无资源而暂停，因撤消而消亡。而程序是静态实体。</p></li><li><p>并发性：多个进程实体同时存在于内存中，能在一段时间内同时运行。</p></li><li><p>独立性：在传统OS中，进程是独立运行的基本单位，也是系统分配资源和调度的基本单位。</p></li><li><p>异步性：也叫制约性，进程以各自独立的不可预知的速度向前推进。</p></li><li><p>结构性：进程实体由程序段、数据段及进程控制块组成，又称为进程映像。</p></li></ul><blockquote><p>进程与程序的关系：</p><p>进程是动态概念，程序是静态概念；进程是程序在处理机上的一次执行过程，而程序是指令的集合。</p><p>进程是暂时的，程序是永久的。进程是一个状态变化的过程；程序可以长久保存。</p><p>进程与程序的组成不同。进程的组成包括程序、数据和进程控制块。</p><p>进程与程序是密切相关的。一个程序可以对应多个进程；一个进程可以包括多个程序。</p><p>进程可以创建新进程，而程序不能形成新程序。</p></blockquote><h2 id="3、进程的状态及转换"><a href="#3、进程的状态及转换" class="headerlink" title="3、进程的状态及转换"></a>3、进程的状态及转换</h2><ol><li><p>就绪状态：进程已获得除处理机以外的所有资源，一旦分配了处理机就可以立即执行。</p></li><li><p>执行状态：又称运行状态。一个进程获得必要的资源并正在处理机上执行。</p></li><li>阻塞状态：又称等待状态、睡眠状态。正在执行的进程，由于发生某事件而暂时无法执行下去（如等待输入/输出完成）。这时即使把处理机分配给该进程，它也无法运行。</li><li>新建状态（new）：进程刚刚建立，但还未进入就绪队列。又称创建状态。</li><li>终止状态（terminated） ：当一个进程正常或异常结束，操作系统已释放它所占用的资源，但尚未将它撤消时的状态，又称退出状态。</li></ol><blockquote><p>大多数状态不可逆转，如等待不能转换为运行。</p><p>状态转换大多为被动进行，但运行→等待是主动的。</p><p>一个进程在一个时刻只能处于上述状态之一。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220314142942221.png" alt="image-20220314142942221"></p><ol><li>挂起状态：在某些系统中，希望人为将进程挂起使之处于静止状态。</li></ol><blockquote><p>进程挂起的原因有：</p><p>系统故障或功能受到破坏：先挂起，故障消除后再恢复。</p><p>检查中间结果：挂起进程以便检查。</p><p>资源不足：挂起进程以腾出资源。</p><p>内存不足：在外存挂起。</p></blockquote><p><strong>因果变迁</strong>：如果一个状态变化A的发生，会引起另一个状态变化B的发生，则称A、B之间是因果变迁。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220314144135514.png" alt="image-20220314144135514"></p><p>3→4:当发生变迁 3 时，正在执行的进程从执行状态变为就绪状态，进程调度程序必然会从就绪队列中选取，即发生变迁 4。</p><p>1→3:当前执行进程从执行状态变为阻塞状态，不可能同时又从执行状态变为就绪状态。</p><p>2→4:如果处理机空闲，一旦某个进程发生变迁 2，这意味着有一个进程从阻塞状态变为 就绪状态，因而调度程序就会将就绪队列中的此进程投入运行。</p><h2 id="4、进程控制"><a href="#4、进程控制" class="headerlink" title="4、进程控制"></a>4、进程控制</h2><h2 id="5、进程的组织"><a href="#5、进程的组织" class="headerlink" title="5、进程的组织"></a>5、进程的组织</h2><h1 id="二、线程"><a href="#二、线程" class="headerlink" title="二、线程"></a>二、线程</h1><h1 id="1、进程同步"><a href="#1、进程同步" class="headerlink" title="1、进程同步"></a>1、进程同步</h1><blockquote><p>在多道程序系统中，进程是并发执行的，这些进程之间存在着不同的相互制约关系。进程之间的这种制约关系来源于并发进程的合作以及对资源的共享。它体现在如下两个方面：<br>第一，某一进程若收不到另一进程给它提供的必要信息就不能继续运行下去，这种情况表明了两个进程之间在某些点上要交换信息，相互交流运行情况。这种制约关系的基本形式是“进程—进程”，称为直接制约关系。<br>第二，若某一进程要求使用某一资源，而该资源正被另一进程使用，并且这一资源不允许两个进程同时使用，那么该进程只好等待已占用资源的进程释放资源后才能使用。这种制约关系的基本形式是“进程—资源—进程”，称为间接制约关系。<br>进程之间的这种相互依赖又相互制约、相互合作又相互竞争的关系，意味着进程之间需要某种形式的通信，这主要表现为同步和互斥两个方面。  </p></blockquote><h2 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h2><h2 id="互斥的实现方法"><a href="#互斥的实现方法" class="headerlink" title="互斥的实现方法"></a>互斥的实现方法</h2><h2 id="1-3信号量（进程同步机制）"><a href="#1-3信号量（进程同步机制）" class="headerlink" title="1.3信号量（进程同步机制）"></a>1.3信号量（进程同步机制）</h2><h3 id="信号量的定义"><a href="#信号量的定义" class="headerlink" title="信号量的定义"></a>信号量的定义</h3><p>信号量由两个成员（s，q）组成，其中s是一个具有非负初值的整型变量，q是一个初始状态为空的队列。又称信号灯。</p><blockquote><p>信号量中的整型变量S表示系统中某类资源的数目。</p><p>当其值大于0时，表示系统中当前可用资源的数目；</p><p>当其值小于0时，其绝对值表示系统中因请求该类资源而被阻塞的进程数目。</p></blockquote><p>除信号量的初值外，信号量的值仅能由P操作（又称为wait操作）和V操作（又称为signal操作）改变。</p><p>==P操作==</p><p>设S为一个信号量，P（S）执行时主要完成下述动作：</p><ul><li><p>S＝S－1；</p></li><li><p>if（S＜ 0） {设置进程状态为等待；</p></li></ul><p>​                                     将进程放入信号量等待队列；</p><p>​                                      转调度程序；}</p><p>==V操作==</p><p>V(S)执行时主要完成下述动作：</p><ul><li><p>S＝S＋1；</p></li><li><p>if（S≤0）{将信号量等待队列中的第一个进程移出；</p></li></ul><p>​                                  设置其状态为就绪状态并插入就绪队列；</p><p>​                                   然后再返回原进程继续执行；}</p><blockquote><p>P操作可能阻塞执行进程，而V操作可以唤醒其他进程。</p><p>P、V操作在封锁中断的情况下执行，即一个进程在信号量上操作时，不会有别的进程同时修改该信号量。也就是说P、V操作是原语。</p></blockquote><h3 id="利用信号量实现互斥"><a href="#利用信号量实现互斥" class="headerlink" title="利用信号量实现互斥"></a>利用信号量实现互斥</h3><h3 id="经典进程同步问题"><a href="#经典进程同步问题" class="headerlink" title="经典进程同步问题"></a>经典进程同步问题</h3><h4 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h4><h3 id="信号量集机制-AND型信号量"><a href="#信号量集机制-AND型信号量" class="headerlink" title="信号量集机制-AND型信号量"></a>信号量集机制-AND型信号量</h3><p>AND型信号量的基本思想是：将进程在整个运行过程中需要的多类资源，一次性地全部分配给进程，待该进程使用完后再一起释放。只要有一个资源未能分配给该进程，其他所有资源也不分配。</p><p>我们称AND型信号量的P原语为SP或Swait， V原语为SV或Ssignal。</p><p>==SP操作== </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SP（S1，S2，…，Sn）   </span><br><span class="line">&#123;  if（S1＞＝1 &amp; S2＞＝1 &amp; … &amp; Sn＞＝1）</span><br><span class="line">       for （i=1; i&lt;= n; i++)  Si= Si-1;</span><br><span class="line">    else</span><br><span class="line">   &#123;将进程插入第一个小于1的信号量等待队列；</span><br><span class="line">     将调用进程的程序计数器置为SP的第一条指令；</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==SV操作==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SV（S1，S2，…，Sn ）</span><br><span class="line">&#123;  for （i=1； i&lt;=n; i++)  </span><br><span class="line">   &#123;   Si= Si+1;</span><br><span class="line">       唤醒Si等待队列上的所有进程</span><br><span class="line">       并将它们插入就绪队列；</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般信号量级</p><p>信号量集是AND型信号量的扩充，其基本思想是：在一次原语操作中完成对所有资源的申请，即进程可以一次申请多类资源，每类资源可以申请多个，当某类资源的数量低于其下限值或不能满足进程的申请要求时，则不进行分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SP（S1,t1,d1，S2,t2,d2，…，Sn,tn,dn）</span><br><span class="line">     /*ti为下限值，di为资源申请量*/</span><br><span class="line">&#123;  if S1&gt;=t1 &amp;&amp; S1&gt;=d1 &amp;&amp; … &amp;&amp; Sn&gt;=tn &amp;&amp; Sn&gt;=dn )</span><br><span class="line">     for (i=1 ; i&lt;=n; i++) Si=Si－di；</span><br><span class="line">   else</span><br><span class="line">   &#123; 将进程插入第一个资源数小于ti或di的信号量的等待队列；</span><br><span class="line">      将调用进程的程序计数器PC设置为SP的第一条指令；    &#125;  &#125;</span><br><span class="line">SV（S1,d1，S2,d2，…，Sn,dn ）</span><br><span class="line">&#123;   for（ i=1； i&lt;=n; i++)  </span><br><span class="line">     &#123;  Si=Sｉ＋di；</span><br><span class="line">        唤醒队列Si上的所有进程</span><br><span class="line">        并将它们插入就绪队列；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>信号量级的几种特殊情况</p><blockquote><p>SP（S，d，d）:此时信号量集中只有一个信号量，它每次申请d个资源，当资源数量少于d个时，便不予分配。</p><p>SP（S，1，1）：此时的信号量集已退化为记录型信号量。</p><p>SP（S，1，0）：这是一种很特殊的信号量，可作为一个可控开关。当S≥1时，允许多个进程进入特定区域；当S＝0时，禁止任何进程进入特定区。</p></blockquote><h1 id="2、作业调度"><a href="#2、作业调度" class="headerlink" title="2、作业调度"></a>2、作业调度</h1><p>资源有限，需要进行分配管理</p><h2 id="调度的层次"><a href="#调度的层次" class="headerlink" title="调度的层次"></a>调度的层次</h2><p>处理机的三级调度：                                            </p><ul><li><p>高级调度-作业调度        外存——&gt;内存（面向作业）</p></li><li><p>中级调度-内存调度         外存——&gt;内存（面向进程）</p></li><li><p>低级调度-进程调度           内存——&gt;CPU</p></li></ul><p>​             <img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220323081523450.png" alt="image-20220323081523450" style="zoom:50%;" /></p><p>1.高级调度-作业</p><p>作业调度又称高级调度、宏观调度或长程调度，其主要任务是按一定的原则从外存上处于后备状态的作业中选择一个或多个作业，给它们分配内存、输入/输出设备等必要的资源，并建立相应的进程（PCB），以使该作业具有获得竞争处理机的权利。</p><p>作业调度的运行频率较低，通常为几分钟一次。</p><p>作业调入时会建立相应的进程，作业调出时才撤销</p><p>2.中级调度</p><p>中级调度又称中程调度或交换调度，其功能是将内存中暂时不用的信息移到外存，以腾出空间给内存中的进程使用，或将需要的信息从外存读入内存。</p><p>引入中程调度的目的是提高内存利用率和系统吞吐量。</p><p>中级调度的运行频率介于两者之间。</p><p>调到外存等待为挂起状态，PCB不会一起调出，而是会常驻内存，以此来监管。</p><p>3.低级调度</p><p>进程调度又称低级调度、微观调度或短程调度，其主要任务是按照某种策略和方法从就绪队列中选取一个进程，将处理机分配给它。</p><p>进程调度的运行频率很高，一般几十毫秒要运行一次。 </p><h2 id="作业状态及转换"><a href="#作业状态及转换" class="headerlink" title="作业状态及转换"></a>作业状态及转换</h2><p>作业从提交到完成要经历四种状态：</p><ul><li><p>提交状态：用户作业由输入设备向系统外存输入时作业所处的状态。</p></li><li><p>后备状态：作业输入到外存后，系统为其建立了作业控制块，并把它插入到后备作业队列中等待调度运行。</p></li><li><p>运行状态：作业在内存中执行。</p></li><li><p>完成状态：作业正常或异常结束，但作业占有的资源还未被系统全部回收。 </p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220323082910365.png" alt="image-20220323082910365"></p><h3 id="作业调度的功能"><a href="#作业调度的功能" class="headerlink" title="作业调度的功能"></a>作业调度的功能</h3><p>作业调度程序主要完成以下工作 </p><ul><li><p>记录进入系统的各个作业情况。</p></li><li><p>从后备作业中挑选一些作业投入执行。</p></li><li><p>为被选中的作业做好执行前的准备工作。</p></li><li><p>在作业运行结束或运行过程中因某种原因需要撤离时，作业调度程序还要完成作业的善后处理工作。</p></li></ul><p>进程调度的时机</p><p>n正在运行进程结束</p><p>n运行进程因某种原因阻塞，如P操作、I/O等</p><p>n从系统调用或中断返回时，有进程进入就绪队列且就绪队列为空，或进程优先级高于当前运行进程且为剥夺调度方式</p><p>n时间片用完</p><p>进程调度的方式：</p><p>1.抢占方式</p><p>n抢占方式（剥夺方式）：允许调度程序根据某种原则去停止正在执行的进程，将已分配给该进程的处理机重新分配给其他进程。</p><p>n抢占原则有：优先权、时间片。</p><p>2.</p><p>非抢占方式（非剥夺方式）：一旦将处理机分配给某进程后，便让该进程一直执行，直到该进程完成或发生某事件而进入阻塞状态，才把处理机分配给其他进程。</p><p>时机：进程结束、因某种原因而阻塞、执行同步原语等。</p><p>特点：简单，系统开销小，但无法处理紧急任务。</p><h2 id="调度性能评价"><a href="#调度性能评价" class="headerlink" title="调度性能评价"></a>调度性能评价</h2><ul><li><p>CPU利用率：使CPU尽可能的忙碌</p></li><li><p>吞吐量：单位时间内运行完的进程数</p></li><li><p>周转时间：进程从提交到运行结束的时间间隔</p></li><li><p>等待时间：进程在就绪队列中等待调度的时间总和</p></li><li><p>响应时间：从提交请求到系统首次产生响应所用的时间。</p></li></ul><p>最优准则：</p><ul><li><p><strong>最大的**</strong>CPU<strong>**利用率</strong> 　</p></li><li><p><strong>最大的吞吐量</strong> 　　　</p></li><li><p><strong>最短的周转时间</strong></p></li><li><p><strong>最短的等待时间</strong></p></li><li><p><strong>最短的响应时间</strong> </p></li></ul><p>周转时间（=完成-到达）</p><p>作业的周转时间是指从作业提交到作业完成之间的时间间隔。</p><p>平均周转时间是指多个作业的周转时间的平均值。ｎ个作业的平均周转时间：</p><p>  T =（T1＋T2＋ … ＋Tn）／n（Ti为作业ｉ的周转时间）</p><p>带权周转时间是指作业周转时间与作业实际运行时间的比。</p><p>平均带权周转时间是指多个作业的带权周转时间的平均值。ｎ个作业的平均带权周转时间：</p><p>W ＝（W1＋W2＋ … ＋Wn）/n（Wi为作业ｉ的带权周转时间）</p><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="先来先服务（FCFS）"><a href="#先来先服务（FCFS）" class="headerlink" title="先来先服务（FCFS）"></a>先来先服务（FCFS）</h3><p>先请求CPU的进程先分配到CPU</p><p>先来先服务算法既可用于作业调度，也可用于进程调度。</p><p>在作业调度中：从后备作业队列中选择一个或多个最先进入该队列的作业，将它们调入内存，为它们分配资源，创建进程，然后放入就绪队列。</p><p>进程调度中：从就绪队列中选择一个最先进入该队列的进程，为之分配处理机，使之投入运行。该进程一直运行到完成或因等待某一事件而阻塞时才释放处理机。</p><p>算法简单，易于实现，非抢占式算法，不会导致饥饿</p><p>对长作业有利，但不利于短作业及I/O繁忙型作业。</p><h3 id="最短作业优先调度（SJF）"><a href="#最短作业优先调度（SJF）" class="headerlink" title="最短作业优先调度（SJF）"></a>最短作业优先调度（SJF）</h3><p>n最短作业优先：当CPU空闲时，将它赋予具有最短CPU区间的进程。（已到达且运行时间最短）</p><p>在作业调度中，从后备队列中选择一个或多个估计运行时间最短的作业，将它们调入内存运行。</p><p>在进程调度中，从就绪队列中选择一个估计运行时间最短的进程，为之分配处理机，使之投入运行。该进程一直运行到完成或因等待某一事件而阻塞时才释放处理机。（非抢占式调度算法）</p><p>算法调度性能较好</p><p>但对长作业不利，未考虑作业的紧迫程度，运行时间为估计。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220323085706803.png" alt="image-20220323085706803"></p><h3 id="最短剩余时间优先调度算法"><a href="#最短剩余时间优先调度算法" class="headerlink" title="最短剩余时间优先调度算法"></a>最短剩余时间优先调度算法</h3><p>SJF算法可以是抢占的或非抢占的。</p><p>抢占SJF调度有时称为最短剩余时间优先调度。</p><p>若到达新进程的CPU区间短于当前运行进程的剩余时间，则它将抢占CPU。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220323090002123.png" alt="image-20220323090002123"></p><blockquote><p>最短平均周转时间:当一批作业同时到达，最短作业优先调度算法才能获得最短平均周转时间</p><p>设一组作业p1、p2、…、pn，其运行时间为t1、t2、 …、tn，且假定t1&lt;t2&lt; …&lt;tn，则短作业优先调度算法的总周转时间为：</p><p>t1+（t1+t2）+ … +（t1+ … +tn）</p><p>=n*t1+（n-1）t2+ … +tn</p><p>可以证明：若a1≤ a2≤ … ≤ an且b1≤b2≤ … ≤bn，则</p><p>a1bn+a2bn-1 +…+anb1</p><p>≤ a1bi1+a2bi2 +…+anbin</p><p>≤ a1b1+a2b2 +…+anbn</p><p>其中i1、i2、 …、in 是1、2、 …、n的一个排列。</p></blockquote><h3 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h3><p>优先级调度：每个进程都有一个优先级与其关联， CPU分配给具有最高优先级的进程。</p><p>具有相同优先级的进程按FCFS顺序调度。</p><p> 优先级调度算法 </p><ul><li><p>在作业调度中，从后备作业队列中选择若干优先级高的作业调入内存。</p></li><li><p>在进程调度中，将处理机分配给就绪队列中优先级最高的进程。</p></li><li><p>优先级表示进程的重要性及运行优先性，通常用优先数来衡量。在某些系统中，优先数越大优先级越高；而在另一些系统中，优先数越大优先级越小。</p></li></ul><p>按调度方式对优先级调度算法分类</p><p>非抢占式优先级调度算法：系统一旦将处理机分配给就绪队列中优先级最高的进程后，该进程便一直运行下去，直到完成或因发生某事件使该进程放弃处理机时，系统才将处理机分配给另一个更高优先级的进程。</p><p>抢占式优先级调度算法：将处理机分配给优先级最高的进程，使之运行。在进程运行过程中，一旦出现了另一个优先级更高的进程时，进程调度程序就停止原运行进程，而将处理机分配给新出现的高优先级进程。 </p><p>优先级的类型</p><ul><li><p>静态优先级。静态优先级是在创建进程时确定的，确定之后在整个进程运行期间不再改变。</p><p>确定依据有：</p><p>​     进程类型：系统，用户</p><p>​     进程对资源的需求：执行时间，资源数量</p><p>​     用户要求：紧迫程度</p><p>​    特点：简单易行，系统开销小，但不精确。</p></li><li><p>动态优先级。动态优先级是指在创建进程时，根据进程的特点及相关情况确定一个优先级，在进程运行过程中再根据情况的变化调整优先级。</p><p>确定原则有：占用CPU时间，等待时间。</p><p>​     例：优先数=CPU使用时间/2+基本优先数</p><p>​     CPU使用时间衰减函数:</p><p>​     Decay(CPU使用时间)=CPU使用时间/2</p></li></ul><blockquote><p>问题：饥饿，低优先级的进程可能永远得不到运行。</p><p>解决方法：老化，视进程等待时间的延长提高其优先级。</p></blockquote><h3 id="时间片轮转调度（RR）"><a href="#时间片轮转调度（RR）" class="headerlink" title="时间片轮转调度（RR）"></a>时间片轮转调度（RR）</h3><p>每个进程将得到小单位的CPU时间（时间片），通常为10-100毫 秒。时间片用完后，该进程将被抢占并插入就绪队列末尾。</p><p>时间片轮转法：系统将所有就绪进程按到达时间的先后次序排成一个队列，每次调度时把CPU分配给队首进程，并令其执行一个时间片。当时间片用完时，停止该进程的执行，将它送至就绪队列末尾等待下一次执行，然后再把处理机分配给就绪队列中的新队首进程。如此不断循环，直至完成为止。</p><p>设有A、B、C、D、E五个进程，其到达时间分别为0、1、2、3、4，要求运行时间依次为3、6、4、5、2，采用时间片轮转调度算法，当时间片大小为1和4时，试计算其平均周转时间和平均带权周转时间。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220323092919089.png" alt="image-20220323092919089" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220323092936790.png" alt="image-20220323092936790" style="zoom:50%;" /></p><p>时间片大小的选择</p><ul><li><p>若时间片太大，所有进程都能在一个时间片内完成，则时间片轮转算法退化为先来先服务；</p></li><li><p>若时间片太小，则进程调度频繁，系统开销增加。</p></li></ul><p>现代操作系统的时间片一般为10-100ms，上下文切换时间一般少于10us。</p><p>应考虑的因素</p><ul><li><p>系统对响应时间的要求：响应时间=时间片*进程数。进程数一定，则时间片与系统响应时间成正比。</p></li><li><p>就绪队列中的进程数目：时间片与就绪进程数成反比。</p></li><li><p>系统处理能力：人所能承受的响应时间一定，系统速度快则时间片可增长。</p></li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>补充题：设单处理机系统中有n（n&gt;2）个进程，问：</p><ul><li><p>是否总有进程运行？为什么？</p></li><li><p>是否会出现等待队列为空的情况？为什么？</p></li><li><p>是否会出现等待队列为空且无进程运行的情况？为什么？</p></li><li><p>是否会出现就绪队列为空的情况？为什么？</p></li></ul><blockquote><p>不一定总有进程运行，当某一运行中的进程被挂起且其他进程都因各种原因处于阻塞状态，即没有进程处于就绪状态时，不一定总有进程运行。</p><p>有可能会出现。当有一个进程在运行且其他进程已经处于就绪状态时，可能会出现等待队列为空的情况。</p><p>存疑</p><p>有可能，当非运行状态的进程都因各种原因处于阻塞状态而不能变为就绪状态时，会出现就绪状态为空的情况。</p></blockquote><p>1.对进程的管理和控制使用<em>__</em>。</p><p>A. 指令         B. 信号量</p><p>C.原语         D.信箱</p><p>2.分配到必要的资源并获得处理机时的进程状态是<em>__</em>。C</p><p>A. 就绪状态        B.撤消状态</p><p>C. 执行状态          D.阻塞状态</p><p>3.程序的顺序执行通常在 ① 的工作环境中，具有以下特征 ② ；程序的并发执行在 ③ 的工作环境中，具有如下特征 ④ 。</p><p>A.资源共享    B.程序的可再现性 </p><p>C.多道程序    D.单道程序</p><p>4.下列进程状态变化中，<em>__</em>变化是不可能发生的。B</p><p>A.等待→就绪     B.等待→运行 </p><p>C.运行→等待     D.运行→就绪</p><p>5.当<em>__</em>时，进程从执行状态转变为就绪状态。B</p><p>A.等待的事件发生    B.时间片到</p><p>C. 等待某一事件     D.进程被调度程序选中</p><p>6.下面对进程的描述中，错误的是<strong>_</strong>。</p><p>A.进程是有生命期的  B. 进程执行需要处理机</p><p>C.进程是指令的集合  D.进程是动态的概念</p><p>7.操作系统通过<em>__</em>对进程进行管理。</p><p>A. JCB     B. PCB</p><p>C. DCT    D. CHCT</p><p>8.下面所述步骤中，<em>__</em>不是创建进程所必需的。</p><p>A.建立一个进程控制块</p><p>B.为进程分配内存</p><p>C. 将进程控制块链入就绪队列</p><p>D.由调度程序为进程分配CPU</p><p>单道批处理系统中，有四个作业，其有关情况如表 4.12 所示。在采用响应比高<br>者优先调度算法时分别计算其平均周转时间 T 和平均带权周转时间 W  </p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220323100640062.png" alt="image-20220323100640062"></p><h2 id="3-解答题"><a href="#3-解答题" class="headerlink" title="3.解答题"></a>3.解答题</h2><p>（3）试画出下面四条语句的前趋图：<br>S1：a=x+2； S2：b=y+4；<br>S3：c=a+b； S4：d=c+6；  </p><blockquote><p>从这四条语句的变量引用情况看，语句S1和S2可以并发执行，语句S3应在S1及S2执行完成后进行，语句S4应在S3执行完成后进行。其前趋图如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220509091421029.png" alt="image-20220509091421029"></p></blockquote><p>（4）试利用 Bernstein 条件证明解答题 3 中的语句 S1 和 S2 可以并发执行，而语句 S3和 S4 不能并发执行。  </p><blockquote><p>R(S1)={x}   R(S2)={y}   R(S3)={a,b}   R(S4)={c}  </p><p>W(S1)={a}    W(S2)={b}   W(S3)={c}   W(S3)={d}</p><p>因R(S1)∩ W(S2)∪R(S2)∩ W(S1)∪W(S1)∩W(S2)={ }，故S1和S2可以并发执行 。 </p><p>因R(S3)∩ W(S4)∪R(S4)∩ W(S3)∪W(S3)∩W(S4)={c}，故S2和S3不能并发执行 。 </p></blockquote><p>3．解答题<br>（1）请用 P、V 操作写出一个不会出现死锁的哲学家进餐问题的解？  </p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geocart 使用教程</title>
      <link href="/2022/03/11/%E5%B7%A5%E5%85%B7-Geocart%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/03/11/%E5%B7%A5%E5%85%B7-Geocart%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网上关于Geocart的教程比较少，而软件自带的帮助文档是英文，所以本文主要基于帮助文档进行翻译。</p></blockquote><h1>一个示例地图</h1><p>创建一个地图：</p><ul><li>从<code>file</code>,选择<code>New</code>创建一个文档</li><li>点击<code>Map</code>,选择<code>New</code></li></ul><p>结果：Geocart将使用正弦投影绘制默认地球</p><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220311163345127.png" alt="image-20220311163345127"></p><p>编辑地图：</p><ul><li></li><li><p>点击<code>Map</code>——&gt;<code>Tissot indicatrice</code></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB中的地图投影</title>
      <link href="/2022/03/07/MATLAB%E4%B8%AD%E7%9A%84%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1/"/>
      <url>/2022/03/07/MATLAB%E4%B8%AD%E7%9A%84%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>MATLAB</strong>中画地图的四种方法：</p><ul><li><p><strong>m_map地图包</strong></p></li><li><p><strong>geoshow方法</strong></p></li><li><p><strong>mapshow方法</strong></p></li><li><p><strong>简单粗暴的plot方法</strong></p></li></ul></blockquote><h1>worldmap</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%创建世界地图坐标区域</span></span><br><span class="line">worldmap(<span class="string">&#x27;World&#x27;</span>)</span><br><span class="line"><span class="comment">%导入海岸线数据</span></span><br><span class="line">load coastlines</span><br><span class="line"><span class="comment">%绘制海岸线</span></span><br><span class="line">plotm(coastlat,coastlom)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/image-20220313125710505.png" alt="image-20220313125710505"></p><p>主要流程：</p><ul><li>绘制地图坐标区域（通过axesm、worldmap、usemap）</li><li>导入数据（通过load或者shaperead）</li><li>通过geoshow、plotm、scatterm绘制图像</li></ul><p>等角横轴圆柱投影；</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">landareas = shaperead(<span class="string">&#x27;landareas.shp&#x27;</span>,<span class="string">&#x27;UseGeoCoords&#x27;</span>,<span class="built_in">true</span>);</span><br><span class="line">axesm (<span class="string">&#x27;mercator&#x27;</span>, <span class="string">&#x27;Frame&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;Grid&#x27;</span>, <span class="string">&#x27;on&#x27;</span>,<span class="string">&#x27;origin&#x27;</span>,[<span class="number">0</span> <span class="number">120</span> <span class="number">0</span>]);</span><br><span class="line">geoshow(landareas,<span class="string">&#x27;FaceColor&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">.5</span>],<span class="string">&#x27;EdgeColor&#x27;</span>,[<span class="number">.6</span> <span class="number">.6</span> <span class="number">.6</span>]);</span><br><span class="line">tissot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/939319-20160418212413601-1446589159.png" alt="img"></p><p>shaperead的用法</p><p>用于读取shapefile文件的数据，并将其进行存储</p><p>一个读取shp文件的函数，具体用法可以在帮助文档中找到。这里主要讲一下绘图数据的来源。Toolbox中以数据文件的形式提供了整个地球及其主要区域的通用样本数据，以及一些覆盖小区域的高分辨率文件，如世界城市有以下的格式的文件：</p><p>worldcities.dbf,worldcities.shp,worldcities.shx和worldcities.txt。</p><p>我们可以在matlabroot/toolbox/map/mapdata中找到相关数据。</p><p>axesm函数</p><h1>geoshow函数：</h1><p>geoshow是用来显示地图数据的函数<br>geoshow的常用方法：<br>geoshow(lat,lon)直接输入经纬度，将以该经纬度为中心，生成一小片地图<br>geoshow(filename)直接输入地图文件名，生成该地图<br>geoshow(_,Name,Value,)输入相关属性并设定参数，生成所需要的地图。<br>geoshow的常用属性：<br>facecolor：定义了地图表面的颜色，需要输入三个参数且均在0至1之间。如果不写此属性，则默认是黄色。<br>‘facealpha’,0.0 透明度=0 空心<br>edgecolor：定义了边界的颜色，输入的三个参数值同上。也可以直接像上面代码中写的，直接写颜色：‘black’</p><h2 id="计算地球椭球体的一些参数">计算地球椭球体的一些参数</h2><p><img src="https://images2015.cnblogs.com/blog/939319/201605/939319-20160516162559888-1826121464.png" alt="img"></p><p>angle是输入的角度</p><p>referenceEllipsoid（参考椭球体）函数。和这个函数相似的还有referenceSphere（参考球体）和oblateSpheroid函数，都是关于参考系的设置。函数括号中的参数也很明显，分别是设置为WGS84坐标系，单位是km.在进行地图投影的计算前，设置好所需的参考椭球是必须的。MATLAB中包含了多种参考椭球，可以直接使用，只需要查看函数帮助就可以了。</p><p>rcurve函数。计算各种曲率半径。</p><p>基本用法为：rcurve(propertyName,ellipsoid,lat).       transverse，用来计算卯酉圈曲率半径；meridian，用来计算子午圈曲率半径；parallel，用来计算纬线圈半径。只要接下来输入所用参考椭球和纬度，即可计算出相应的参数。</p><p>rsphere函数。计算地球球体的半径。</p><p>triaxial参数可以计算出平均曲率半径。公式为sqrt(a*b),即几何平均值。此外还包括authalic、euler等参数，具体形式请查看帮助。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 地图投影 </tag>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辩论|学习资料</title>
      <link href="/2022/03/04/%E8%BE%A9%E8%AE%BA-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
      <url>/2022/03/04/%E8%BE%A9%E8%AE%BA-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下是我在辩论学习过程中搜集到的学习资源，会不断更新</p></blockquote><h1>书籍</h1><p>“辩论赛不是读书人的胜利，但辩论一定是”</p><h2 id="《学会提问》">《学会提问》</h2><p><img src="https://cdn.jsdelivr.net/gh/xingziding/picodemo/img/%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE.jfif" alt=""></p><p>阅读渠道：微信读书；<a href="https://book.douban.com/subject/20428922/">豆瓣链接</a></p><h2 id="《牛奶可乐经济学》">《牛奶可乐经济学》</h2><h2 id="《刀与星辰》">《刀与星辰》</h2><h1>影视剧</h1><p>影视剧也可以成为很好的学习资料。</p><h2 id="《李狗嗨》">《李狗嗨》</h2><h2 id="《琅琊榜》">《琅琊榜》</h2><p>最近在看，真的是很好看，里面的一些对话也很像在辩论。</p><h1>视频</h1><ul><li><a href="https://mp.weixin.qq.com/s/VTVon_SKXjJpLeApkq0DDg">林正疆学长《政策辩论》讲座</a></li></ul><h1>其他</h1><h2 id="笔记博客文档类">笔记博客文档类</h2><ul><li>《满座衣冠似雪》黄执中学长的博客合集</li><li></li></ul><h2 id="公众号">公众号</h2><ul><li>辩论</li></ul><p>结语：以上的书籍等在网络上都是可以搜索到的，最后一类笔记博客类要是想要学习的话，可以把自己的邮箱留在下面，我看到之后会给你发过去的</p>]]></content>
      
      
      <categories>
          
          <category> 辩论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 辩论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2022/02/28/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/02/28/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>基于github和hexo搭建个人博客</p><blockquote><p>本文为自己搭建个人博客的全记录过程，不断更新。</p></blockquote><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>安装 Git</p><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><p>发布一篇文章</p><p>在xing文件根目录下，进入Git Bash命令窗口，输入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;new article&quot;</span></span><br></pre></td></tr></table></figure><p>在博客目录下的/source/_posts文件夹下，就可以看到（new article.md）的文件，进入编辑即可；</p><h1 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h1><h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>实现流程</p><ul><li>第一步：安装插件</li><li>第二步：修改文章</li></ul><p>可以通过一个小插件，实现文章输入密码才能浏览。通过以下命令安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASH</span><br><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><p>接着在文章头部里，添加以下内容即可使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">---</span><br><span class="line">title: 加密文章测试，输入test即可查看</span><br><span class="line">password: test</span><br><span class="line">message: 测试加密，这里的密码是：test</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="页面插入-B-站视频"><a href="#页面插入-B-站视频" class="headerlink" title="页面插入 B 站视频"></a>页面插入 B 站视频</h2><h2 id="首页置顶文章轮播组件"><a href="#首页置顶文章轮播组件" class="headerlink" title="首页置顶文章轮播组件"></a>首页置顶文章轮播组件</h2><p>新建<BlogRoot>\themes\butterfly\layout\includes\sticky.pug</p><pre><code>link(rel=&#39;stylesheet&#39; href=&#39;https://unpkg.com/swiper/swiper-bundle.min.css&#39;)//- style(type=&#39;text/css&#39;)..recent-post-item#Sticky  #StickyList.swiper-container    .swiper-wrapper        &lt;Custom&gt;//- 分页器.swiper-pagination</code></pre><p>.js-pjax<br>  script(src=’<a href="https://unpkg.com/swiper/swiper-bundle.min.js">https://unpkg.com/swiper/swiper-bundle.min.js</a>‘)<br>  script.<br>    var mySwiper = new Swiper(‘#StickyList’, {<br>      initialSlide: Math.round(Math.random()*5 + 1),// 初始化滑块索引（1到6随机数）<br>      direction: ‘horizontal’,// 垂直切换选项<br>      speed: 600,             // 切换速度<br>      loop: true,             // 循环模式选项<br>      slidesPerView: 2,       // 显示2个滑块<br>      centeredSlides: true,   // 选中滑块居中</p><pre><code>  effect : &#39;coverflow&#39;,  slidesPerView: 2,  coverflowEffect: &#123;    rotate: 20,           // 滑块做3d旋转时Y轴的旋转角度    stretch: 0,          // 每个滑块之间的拉伸值，越大滑块靠得越紧    depth: 80,            // 滑块的位置深度。值越大z轴距离越远，看起来越小    modifier: 2,          // depth和rotate和stretch的倍率，值越大这三个参数的效果越明显    slideShadows : false  // 是否开启slide阴影  &#125;,  loopAdditionalSlides: 0,  loopPreventsSlide: false, // 滑块过渡时，允许切换过渡方向  autoplay: true,           // 自动滑动  autoplay: &#123;    disableOnInteraction: false,  // 滑块触碰后不会停止自动切换    pauseOnMouseEnter: true,      // 鼠标置于swiper时暂停自动切换  &#125;,  mousewheel: true,       // 鼠标滚轮控制滑块切换  // 如果需要分页器  pagination: &#123;    el: &#39;.swiper-pagination&#39;,    clickable :true,          // 点击分页器的指示点分页器会控制滑块切换    // 自定义分页器的指示点    renderBullet: function (index, className) &#123;      return &#39;&lt;span class=&quot;&#39; + className + &#39;&quot;&gt;&#39; + (index + 1) + &#39;&lt;/span&gt;&#39;;    &#125;,  &#125;,&#125;)</code></pre><h1 id="hexo基础知识"><a href="#hexo基础知识" class="headerlink" title="hexo基础知识"></a>hexo基础知识</h1><ol><li>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</li></ol><h2 id="根目录下文件"><a href="#根目录下文件" class="headerlink" title="根目录下文件"></a>根目录下文件</h2><p>默认目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><li>public：执行hexo generate命令，输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul><li>drafts：草稿文章</li><li>posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li></ul><ol><li>node_modules文件夹中的内容是整个hexo的依赖包，这个一般情况下不需要去做任何增删改。</li><li>public文件夹其实是当我们执行<code>hexo generate</code>命令之后由hexo根据我们的主题以及文章内容生成的一个文件。打开之后可以看到对应的时间我们写的博客内容，例如我今天的博客就是pubulic / 2016 / 05 / 01 / 如何更换hexo主题、删除文章.md这篇文章。你可以新建一篇文章来看看pubulic文件夹下面的变化，不过因为本文还没有讲解如何生成新的文章，所以你先不用着急，我会在后面的博客中慢慢讲解更多关于hexo如何应用的文章。</li><li>scaffolds其实就是脚手架的意思，有些人也称之为模板，其实就是我们新生成一篇文章时从哪个模板来生成。这里面默认只有三个模板，draft, page, post，我们生成文章是可以指定采用哪个模板。</li><li>source和themes子文件夹不再讲解，上面已经解释过了。</li><li>_config.yml文件，这个其实是我们整个主目录的配置，你会发现你把主题从landscape切换到Tinnypp时，除了下载主题包之外就是在这个文件里去配置自己的主题，只需要更改少量的键值对内容就可以对整个主目录和网页进行变更了。</li><li>db.json，没有仔细研究，后期会更新这部分的内容。</li><li>package.json，应用程序数据，指明hexo的版本等信息，类似一般软件中的关于按钮</li></ol><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><p>常见命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;postName&quot;</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;pageName&quot;</span> <span class="meta">#新建页面</span></span><br><span class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="meta">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="meta">#部署到GitHub</span></span><br><span class="line">hexo help  <span class="meta"># 查看帮助</span></span><br><span class="line">hexo version  <span class="meta">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo <span class="keyword">new</span></span><br><span class="line">hexo g == hexo <span class="keyword">generate</span></span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure><h1 id="其他建站方法"><a href="#其他建站方法" class="headerlink" title="其他建站方法"></a>其他建站方法</h1><p>Hugo<br>jekyll</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://space.bilibili.com/13282871">B站up主卷二兔</a></p><p>（很仔细的新手教程，并且是最新版的安装过程）</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">butterfly安装文档</a></p><p><a href="https://www.drflower.top/posts/5920b38e/">Hexo-Butterfly主题博客搭建记录  无境</a></p><p><a href="https://www.drflower.top/posts/5920b38e/">花桑</a></p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>肆意生长|纪念我的newsletter夭折</title>
      <link href="/2021/11/25/%E8%82%86%E6%84%8F%E7%94%9F%E9%95%BF/"/>
      <url>/2021/11/25/%E8%82%86%E6%84%8F%E7%94%9F%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>大二下学期刚开学，接触到了newletter这种获取信息的方式，很合我的极简口味，一时心血来潮便想着自己写要开始创作，并且又想到不知多久之前这一篇博文的文章题目甚是想合，便以“肆意生长”来命名了，但是终究是学业太多，我自己又拖延，拖了几周之后才写下了第一篇。</p><p>既然如此，又为什么夭折了呢？还是因为极简，我当时建立这个博客的初衷就是将所有的文字、笔记、图片干脆全放到这上面来，倒也是省去了不少的麻烦，而newletter的发布必定要求我每周分去这一部分精力，我本就不致于信息分享，所以即使有益也是偏离了我的方向，思来想去，还是决定放弃。</p><p>既然因为这个博文的题目而起，也就让这篇未完成的文章放于这里吧。但是每周一次总结的方式倒是很不错的，那我以后也每周周日写一篇“肆意生长”，写写这一周的得与失，也可以归纳一下最近看的电视与电影以及书籍。</p></blockquote><p>你好，我是川河杏，这里是肆意生长01期！很高兴我们能够在此相遇，第一期我想讲讲我为什么会选择newsletter这种创作形式，这主要是与我自己的信息获取方式和输出有关，除此之外，每一期我也会分享书影音方面的三个作品，以及我最近读过还不错的文章。</p><h1>🤔 个人信息获取</h1><p>在如今碎片化阅读的时代，相信我们都有很多渠道来阅读信息，但文字方面，我最开始有公众号、知乎、微博、豆瓣等，同时会浏览一些网页，但是长期的碎片化接收，真正留下的信息确少之又少，最重要的是</p><p>除去获取信息，创作信息也是很重要的一方面，我喜欢在朋友圈、QQ空间发自己的动态，也想着在知乎发一些文章，微博、网易云的动态都曾是我的场地，</p><p>当我重新审视自己众多的信息渠道的时候，我认识到我并没有获得太多，反而让自己频繁穿梭在这些当中，越加浮躁和焦虑，所以我选择了改变，我删掉了自己之前发过的所有朋友圈（当然，留下了注册微信后发的第一条），清空了微博、知乎等个人社交平台，现在只剩下QQ空间时而发些动态，也只是我一个人看，留下了B站发一些我的摄影视频，至于信息输出平台，我建了一个自己的<a href="xingziding.github.io">个人博客</a>，发布我的笔记文章等，选择newsletter的一个契机是偶然间看到相关文章，自己也订阅了几个，觉得这种一段时间的定期投送……</p><h1>书影音</h1><h2 id="《纳闷集》">《纳闷集》</h2><p><img src="https://imgs.zhubai.love/062a89301c874e009d2729b60187b162.png" alt="img"></p><p><a href="https://book.douban.com/subject/35041581/">豆瓣链接</a></p><blockquote><p>“自愿和自发是两回事哦。”      ——引自章节《私奔的外婆》</p></blockquote><h2 id="《康熙王朝》">《康熙王朝》</h2><p><img src="https://imgs.zhubai.love/1f5bf1a6604e4251a1ae9f5da65bcf4d.png" alt="img"></p><p>观看渠道：bilibili；豆瓣链接</p><p>这是一部讲述康熙（爱新觉罗·玄烨）在位期间的电视剧，改编自二月河的同名小说。</p><h2 id="《第一张创作专辑》五月天">《第一张创作专辑》五月天</h2><p><img src="https://imgs.zhubai.love/867e7e36b5e54196a58064dbe7d5e5f4.png" alt="img"></p><p>这是五月天出道的第一张专辑，收录了《拥抱》等歌曲，我推荐是因为很喜欢里面的《轧车》这首歌，与五月天后面发表歌曲不同，这是他们最大胆、狂傲不羁的一首歌，故而深得我心。</p><h1>🌿这一周我读了什么?</h1><ul><li><a href="https://jeffhuang.com/productivity_text_file/">My productivity app for the past 12 years has been a single .txt file</a>这篇文章介绍作者12年来在txt上面来进行自己的时间管理</li><li><a href="https://sspai.com/post/70493">用Craft X Snippets记录晨间日记</a></li></ul><blockquote><p>以上就是肆意生长本期的全部内容，如果你觉得还不错的话，欢迎订阅，也可以分享给好友，我们下期再见~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 肆意生长 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 肆意生长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一以贯之的努力</title>
      <link href="/2021/10/04/%E5%A4%A9%E6%89%8D%E4%B9%8B%E8%B7%AF/"/>
      <url>/2021/10/04/%E5%A4%A9%E6%89%8D%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1>天才之路必将是孤独而痛苦的。</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/12/hello-world/"/>
      <url>/2021/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
